{"version":3,"sources":["components/ColorGeneratorRow.js","utils/utils.js","components/MarkerContainer.js","components/TextInput.js","components/ColorPicker.js","components/NewColorGen.js","components/App/App.jsx","serviceWorker.js","index.js"],"names":["ElContainer","styled","div","_templateObject","ElColors","_templateObject2","ElColor","_templateObject3","ElColorSelect","_templateObject4","ElColorSelectIndicator","_templateObject5","ElConnector","_templateObject6","ColorGeneratorRow","_ref","colors","level","index","editingIndex","setEditingIndex","_ref$showConnector","showConnector","react_default","a","createElement","map","c","colorIndex","key","style","backgroundColor","color","isLight","onClick","clamp","value","min","arguments","length","undefined","max","Math","round","lerp","b","t","Object","toConsumableArray","Array","i","random","toString","join","MarkerContainer_templateObject","MarkerContainer","position","setPosition","_ref$width","width","_ref$height","height","rest","objectWithoutProperties","colorPickerRef","useRef","mouseDownRef","useEffect","mouseUpListener","current","mouseMoveListener","e","clientX","getBoundingClientRect","left","clientY","top","document","addEventListener","removeEventListener","MarkerContainer_ElContainer","assign","ref","onMouseDown","target","handleColorSelect","objectSpread","ElInput","input","TextInput_templateObject","TextInput","esm_extends","getParameters","baseColor","size","defaultHuePosition","hue","defaultHue","rotate","hex","hueRGB","rgb","array","base","apply","y","baseSaturated","x","defaultMarkerPosition","ElColorPickerContainer","ColorPicker_templateObject","ElColorPickerTopRow","ColorPicker_templateObject2","ElColorPickerBottomRow","ColorPicker_templateObject3","ElColorPickerBackground","ColorPicker_templateObject4","ElColorPickerMarker","ColorPicker_templateObject5","ElColorPickerHueMarker","ColorPicker_templateObject6","ElColorSchemeOptions","_templateObject7","ElColorSchemeOption","_templateObject8","props","active","css","_templateObject9","ColorPicker","_ref$color","defaultColor","setColor","scheme","setScheme","_useMemo","useMemo","_useState","useState","colorInput","pickerColor","markerPosition","huePosition","_useState2","slicedToArray","s","setS","r","g","selectedColor","timeout","setTimeout","toLowerCase","clearTimeout","components_MarkerContainer","p","background","concat","components_TextInput","onChange","newColorInput","test","_getParameters","console","log","className","label","o","NewColorGen_templateObject","ElColorsContainer","NewColorGen_templateObject2","NewColorGen_templateObject3","ElColorRowGroup","NewColorGen_templateObject4","NewColorGen_templateObject5","ElExportContainer","NewColorGen_templateObject6","generateColors","luminosity","luminositySqrtStr","pow","Number","values","slice","colorRange","darker","darkerLimit","darken","unshift","lighter","lighterLimit","lighten","push","reduce","prev","curr","abs","NewColorGen","_useState3","_useState4","baseColors","setBaseColors","generatedColors","generatedColorSchemes","NewColorGen_ElContainer","NewColorGen_ElColors","_generatedColors$colo","additionalRows","components_ColorGeneratorRow","rowIndex","NewColorGen_ElColorPickerContainer","components_ColorPicker","newBaseColors","acc","_ref2","App","components_NewColorGen","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b045f2e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport color from \"color\";\r\n\r\nconst ColorGeneratorRow = ({\r\n  colors,\r\n  level,\r\n  index,\r\n  editingIndex,\r\n  setEditingIndex,\r\n  showConnector = false\r\n}) => {\r\n  return (\r\n    <ElContainer>\r\n      <ElColors>\r\n        {colors.map((c, colorIndex) => (\r\n          <ElColor\r\n            key={colorIndex}\r\n            style={{\r\n              backgroundColor: c,\r\n              color: color(c).isLight() ? \"black\" : \"white\"\r\n            }}\r\n          >\r\n            {colorIndex === level - 1 && \"╳\"}\r\n          </ElColor>\r\n        ))}\r\n        {showConnector && <ElConnector />}\r\n      </ElColors>\r\n      {typeof index === \"number\" && (\r\n        <ElColorSelect\r\n          onClick={() => setEditingIndex(index === editingIndex ? -1 : index)}\r\n          style={{ backgroundColor: colors[level - 1] }}\r\n        />\r\n      )}\r\n      {typeof index === \"number\" && index === editingIndex && <ElColorSelectIndicator />}\r\n    </ElContainer>\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-template-columns: minmax(0, 675px) minmax(0, 75px) 30px;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ElColors = styled.div`\r\n  position: relative;\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: minmax(0, 1fr);\r\n  border: 1px solid var(--color-neutral-500);\r\n`;\r\n\r\nconst ElColor = styled.div`\r\n  height: 75px;\r\n  min-width: 30px;\r\n\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n`;\r\n\r\n\r\nconst ElColorSelect = styled.div`\r\n  height: 75px;\r\n  width: 75px;\r\n  border: 1px solid var(--color-neutral-500);\r\n\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  justify-content: start;\r\n  justify-self: start;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ElColorSelectIndicator = styled.div`\r\n  position: relative;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    border-top: 37.5px solid transparent;\r\n    border-left: 15px solid var(--color-neutral-700);\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    border-bottom: 37.5px solid transparent;\r\n    border-left: 15px solid var(--color-neutral-700);\r\n  }\r\n`\r\nconst ElConnector = styled.div`\r\n  content: \"\";\r\n  display: block;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: -31px;\r\n  transform: translateX(-50%);\r\n  height: 30px;\r\n  /* width: calc(100% - 75px); */\r\n  width: 15px;\r\n  background-color: var(--color-neutral-600);\r\n`;\r\n\r\nexport default ColorGeneratorRow;\r\n","const toPaddedHexString = (num, len) => {\r\n  const str = num.toString(16);\r\n  return \"0\".repeat(len - str.length) + str;\r\n};\r\n\r\nconst numbersToHex = (r, g, b) =>\r\n  `#${toPaddedHexString(r, 2)}${toPaddedHexString(g, 2)}${toPaddedHexString(\r\n    b,\r\n    2\r\n  )}`;\r\n\r\nexport const clamp = (value, min = 0, max = 1) =>\r\n  Math.round(Math.min(Math.max(value, min), max));\r\n\r\nexport const clamp0to255 = value =>\r\n  Math.round(Math.min(Math.max(value, 0), 255));\r\n\r\nexport const lerp = (a, b, t) => a + (b - a) * t;\r\n\r\nexport const RGBToHSL = rgb => {\r\n  // Make r, g, and b fractions of 1\r\n  const r = (rgb.r /= 255);\r\n  const g = (rgb.g /= 255);\r\n  const b = (rgb.b /= 255);\r\n\r\n  // Find greatest and smallest channel values\r\n  let cmin = Math.min(r, g, b);\r\n  let cmax = Math.max(r, g, b);\r\n  let delta = cmax - cmin;\r\n  let h = 0;\r\n  let s = 0;\r\n  let l = 0;\r\n\r\n  // Calculate hue\r\n  // No difference\r\n  if (delta == 0) h = 0;\r\n  // Red is max\r\n  else if (cmax == r) h = ((g - b) / delta) % 6;\r\n  // Green is max\r\n  else if (cmax == g) h = (b - r) / delta + 2;\r\n  // Blue is max\r\n  else h = (r - g) / delta + 4;\r\n\r\n  h = Math.round(h * 60);\r\n\r\n  // Make negative hues positive behind 360°\r\n  if (h < 0) h += 360;\r\n\r\n  // Calculate lightness\r\n  l = (cmax + cmin) / 2;\r\n\r\n  // Calculate saturation\r\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n\r\n  // Multiply l and s by 100\r\n  s = Math.abs(s * 100);\r\n  l = Math.abs(l * 100);\r\n\r\n  return { h, s, l };\r\n};\r\n\r\nexport const HSLToRGB = hsl => {\r\n  // Must be fractions of 1\r\n  const h = hsl.h;\r\n  const s = hsl.s / 100;\r\n  const l = hsl.l / 100;\r\n\r\n  let c = (1 - Math.abs(2 * l - 1)) * s,\r\n    x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r\n    m = l - c / 2,\r\n    r = 0,\r\n    g = 0,\r\n    b = 0;\r\n\r\n  if (0 <= h && h < 60) {\r\n    r = c;\r\n    g = x;\r\n    b = 0;\r\n  } else if (60 <= h && h < 120) {\r\n    r = x;\r\n    g = c;\r\n    b = 0;\r\n  } else if (120 <= h && h < 180) {\r\n    r = 0;\r\n    g = c;\r\n    b = x;\r\n  } else if (180 <= h && h < 240) {\r\n    r = 0;\r\n    g = x;\r\n    b = c;\r\n  } else if (240 <= h && h < 300) {\r\n    r = x;\r\n    g = 0;\r\n    b = c;\r\n  } else if (300 <= h && h < 360) {\r\n    r = c;\r\n    g = 0;\r\n    b = x;\r\n  }\r\n  r = Math.round((r + m) * 255);\r\n  g = Math.round((g + m) * 255);\r\n  b = Math.round((b + m) * 255);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nexport const HSLToHex = hsl => {\r\n  const rgb = HSLToRGB(hsl);\r\n\r\n  return RGBToHex(rgb);\r\n};\r\n\r\nexport const getTextDark = color => {\r\n  const rgb = hexToRGB(color);\r\n  return rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114 > 186;\r\n};\r\n\r\nexport const hexToRGB = hex => {\r\n  const r = parseInt(hex.slice(1, 3), 16);\r\n  const g = parseInt(hex.slice(3, 5), 16);\r\n  const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nexport const hexToHSL = hex => {\r\n  const rgb = hexToRGB(hex);\r\n  return RGBToHSL(rgb);\r\n};\r\n\r\nexport const RGBToHex = rgb => numbersToHex(rgb.r, rgb.g, rgb.b);\r\n\r\nexport const generateHue = (color, gain) => {\r\n  const r0 = color.rgb.r;\r\n  const g0 = color.rgb.g;\r\n  const b0 = color.rgb.b;\r\n\r\n  const mult = Math.abs(gain / 100);\r\n  const target = gain > 0 ? 255 : 0;\r\n\r\n  const r = clamp0to255(lerp(r0, target, mult));\r\n  const g = clamp0to255(lerp(g0, target, mult));\r\n  const b = clamp0to255(lerp(b0, target, mult));\r\n\r\n  return RGBToHex({ r, g, b });\r\n};\r\n\r\nexport const combineRGB = (tarhexToRGB, addedRGB, strength) => {\r\n  const totalAdd = addedRGB.r + addedRGB.g + addedRGB.b;\r\n  const averageAdd = clamp0to255((totalAdd / 3) * strength);\r\n  const r = clamp0to255(tarhexToRGB.r + addedRGB.r * strength - averageAdd);\r\n  const g = clamp0to255(tarhexToRGB.g + addedRGB.g * strength - averageAdd);\r\n  const b = clamp0to255(tarhexToRGB.b + addedRGB.b * strength - averageAdd);\r\n\r\n  return numbersToHex(r, g, b);\r\n};\r\n\r\nexport const generateRandomString = [...Array(10)]\r\n  .map(i => (~~(Math.random() * 36)).toString(36))\r\n  .join(\"\");\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { clamp } from \"../utils/utils\";\r\n\r\nconst MarkerContainer = ({\r\n  position,\r\n  setPosition,\r\n  width = 100,\r\n  height = 100,\r\n  style,\r\n  ...rest\r\n}) => {\r\n  const colorPickerRef = useRef();\r\n  const mouseDownRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const mouseUpListener = () => (mouseDownRef.current = false);\r\n    const mouseMoveListener = e => {\r\n      if (mouseDownRef.current) {\r\n        setPosition([\r\n          clamp(\r\n            e.clientX - colorPickerRef.current.getBoundingClientRect().left,\r\n            0,\r\n            width\r\n          ),\r\n          clamp(\r\n            e.clientY - colorPickerRef.current.getBoundingClientRect().top,\r\n            0,\r\n            height\r\n          )\r\n        ]);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mouseup\", mouseUpListener);\r\n    document.addEventListener(\"mousemove\", mouseMoveListener);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mouseup\", mouseUpListener);\r\n      document.removeEventListener(\"mousemove\", mouseMoveListener);\r\n    };\r\n  }, [width, height, setPosition]);\r\n\r\n  const handleColorSelect = e => {\r\n    if (mouseDownRef.current) {\r\n      setPosition([\r\n        e.clientX - e.target.getBoundingClientRect().left,\r\n        e.clientY - e.target.getBoundingClientRect().top\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ElContainer\r\n      {...rest}\r\n      ref={colorPickerRef}\r\n      onMouseDown={e => {\r\n        mouseDownRef.current = true;\r\n        handleColorSelect(e);\r\n      }}\r\n      style={{\r\n        ...style,\r\n        width,\r\n        height\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport default MarkerContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nconst TextInput = ({ ...rest }) => {\r\n  return <ElInput {...rest} />\r\n}\r\n\r\nconst ElInput = styled.input`\r\n  border: 1px solid var(--color-neutral-500);\r\n  background-color: var(--color-neutral-300);\r\n  padding: 0px 15px;\r\n  height: 30px;\r\n\r\n  color: white;\r\n  line-height: 28px;\r\n`\r\n\r\nexport default TextInput","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport color from \"color\";\r\nimport MarkerContainer from \"./MarkerContainer\";\r\nimport TextInput from \"./TextInput\"\r\nimport { lerp } from \"../utils/utils\";\r\n\r\nconst ColorPicker = ({\r\n  color: defaultColor = \"#ff0000\",\r\n  setColor,\r\n  scheme,\r\n  setScheme\r\n}) => {\r\n  const size = 400;\r\n  const sizeHue = 60;\r\n\r\n  const {\r\n    defaultHuePosition,\r\n    defaultHue,\r\n    defaultMarkerPosition\r\n  } = useMemo(() => getParameters(defaultColor, size), []);\r\n\r\n  const [s, setS] = useState({\r\n    colorInput: defaultColor,\r\n    pickerColor: defaultHue,\r\n    markerPosition: defaultMarkerPosition,\r\n    huePosition: [0, defaultHuePosition],\r\n  });\r\n\r\n  const {\r\n    colorInput,\r\n    pickerColor,\r\n    markerPosition,\r\n    huePosition,\r\n  } = s\r\n\r\n  const x = markerPosition[0] / size;\r\n  const y = markerPosition[1] / size;\r\n\r\n  const rgb = color(pickerColor)\r\n    .rgb()\r\n    .array();\r\n  const r = lerp(lerp(255, rgb[0], x), 0, y);\r\n  const g = lerp(lerp(255, rgb[1], x), 0, y);\r\n  const b = lerp(lerp(255, rgb[2], x), 0, y);\r\n  const selectedColor = color([r, g, b]).hex();\r\n\r\n  useEffect(() => {\r\n    if (defaultColor !== selectedColor) {\r\n      const timeout = setTimeout(() => {\r\n        setColor(selectedColor);\r\n\r\n        if (selectedColor.toLowerCase() !== colorInput.toLowerCase()) {\r\n          setS(s => ({ ...s, colorInput: selectedColor }));\r\n        }\r\n      }, 100);\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [defaultColor, selectedColor, setColor, colorInput]);\r\n\r\n  return (\r\n    <ElColorPickerContainer>\r\n      <ElColorPickerTopRow>\r\n        <MarkerContainer\r\n          position={markerPosition}\r\n          setPosition={p => setS({ ...s, markerPosition: p })}\r\n          width={size}\r\n          height={size}\r\n          style={{\r\n            backgroundColor: color(pickerColor)\r\n          }}\r\n        >\r\n          <ElColorPickerBackground\r\n            style={{\r\n              background: `linear-gradient(to left, transparent, white)`\r\n            }}\r\n          />\r\n          <ElColorPickerBackground\r\n            style={{\r\n              background: \"linear-gradient(to top, black, transparent)\"\r\n            }}\r\n          />\r\n          <ElColorPickerMarker\r\n            style={{\r\n              left: `${markerPosition[0] / 4}%`,\r\n              top: `${markerPosition[1] / 4}%`,\r\n              backgroundColor: selectedColor\r\n            }}\r\n          />\r\n        </MarkerContainer>\r\n        <MarkerContainer\r\n          position={huePosition}\r\n          setPosition={p => {\r\n            const hue = color(\"#ff0000\")\r\n              .rotate((p[1] / size) * 360)\r\n              .hex();\r\n            setS({\r\n              ...s,\r\n              huePosition: p,\r\n              pickerColor: hue\r\n            });\r\n          }}\r\n          width={sizeHue}\r\n          height={size}\r\n          style={{\r\n            background:\r\n              \"linear-gradient(to bottom, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000)\"\r\n          }}\r\n        >\r\n          <ElColorPickerHueMarker style={{ top: `${huePosition[1] / 4}%` }} />\r\n        </MarkerContainer>\r\n      </ElColorPickerTopRow>\r\n      <ElColorPickerBottomRow>\r\n        <div>\r\n          <TextInput value={colorInput} onChange={(e) => {\r\n            const newColorInput = e.target.value;\r\n\r\n            if (/^#[0-9a-f]{6}$/i.test(newColorInput)) {\r\n              const {\r\n                defaultHuePosition,\r\n                defaultHue,\r\n                defaultMarkerPosition\r\n              } = getParameters(newColorInput, size);\r\n\r\n              console.log({\r\n                defaultHuePosition,\r\n                defaultHue,\r\n                defaultMarkerPosition\r\n              });\r\n\r\n              setS({\r\n                colorInput: newColorInput,\r\n                pickerColor: defaultHue,\r\n                huePosition: defaultHuePosition,\r\n                markerPosition: defaultMarkerPosition,\r\n              })\r\n            } else {\r\n              setS({ ...s, colorInput: newColorInput })\r\n            }\r\n          }} />\r\n        </div>\r\n        <div>\r\n          <div className=\"small-header\">\r\n            Color Scheme\r\n          </div>\r\n          <ElColorSchemeOptions>\r\n            {[\r\n              { label: \"None\", value: null },\r\n              { label: \"Analogous\", value: \"analogous\" },\r\n              { label: \"Complementary\", value: \"complementary\" },\r\n              { label: \"Split Complementary\", value: \"split-complementary\" },\r\n              { label: \"Triadic\", value: \"triadic\" },\r\n              { label: \"Tetradic\", value: \"tetradic\" }\r\n            ].map((o, index) => (\r\n              <ElColorSchemeOption\r\n                key={index}\r\n                active={scheme === o.value}\r\n                onClick={() => setScheme(o.value)}\r\n              >\r\n                {o.label}\r\n              </ElColorSchemeOption>\r\n            ))}\r\n          </ElColorSchemeOptions>\r\n        </div>\r\n      </ElColorPickerBottomRow>\r\n    </ElColorPickerContainer>\r\n  );\r\n};\r\n\r\nconst getParameters = (baseColor, size) => {\r\n  const defaultHuePosition = (color(baseColor).hue() / 360) * size;\r\n  const defaultHue = color(\"#ff0000\")\r\n    .rotate((defaultHuePosition / size) * 360)\r\n    .hex();\r\n\r\n  const hueRGB = color(defaultHue)\r\n    .rgb()\r\n    .array();\r\n  const base = color(baseColor)\r\n    .rgb()\r\n    .array();\r\n  const max = Math.max(...base);\r\n  const y = size - (max / 255) * size;\r\n  const baseSaturated = base.map(x => (x * 255) / max);\r\n\r\n  const toWhite =\r\n    baseSaturated[0] !== 255\r\n      ? (baseSaturated[0] - hueRGB[0]) / (255 - hueRGB[0])\r\n      : baseSaturated[1] !== 255\r\n        ? (baseSaturated[1] - hueRGB[1]) / (255 - hueRGB[1])\r\n        : (baseSaturated[2] - hueRGB[2]) / (255 - hueRGB[2]);\r\n\r\n  const x = size - toWhite * size;\r\n\r\n  return {\r\n    defaultHuePosition,\r\n    defaultHue,\r\n    defaultMarkerPosition: [x, y]\r\n  };\r\n}\r\n\r\nconst ElColorPickerContainer = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ElColorPickerTopRow = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-auto-flow: column;\r\n  align-items: flex-start;\r\n  justify-items: flex-start;\r\n`\r\n\r\nconst ElColorPickerBottomRow = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-auto-flow: column;\r\n`\r\n\r\nconst ElColorPickerBackground = styled.div`\r\n  position: absolute;\r\n  top: 0%;\r\n  left: 0%;\r\n  bottom: 0%;\r\n  right: 0%;\r\n\r\n  pointer-events: none;\r\n`;\r\n\r\nconst ElColorPickerMarker = styled.div`\r\n  position: absolute;\r\n  height: 16px;\r\n  width: 16px;\r\n  transform: translateX(-50%) translateY(-50%);\r\n  border: 2px solid white;\r\n  background-color: transparent;\r\n  border-radius: 10px;\r\n\r\n  pointer-events: none;\r\n`;\r\n\r\nconst ElColorPickerHueMarker = styled.div`\r\n  position: absolute;\r\n  width: calc(100% + 10px);\r\n  height: 2px;\r\n  transform: translateX(-5px) translateY(-1px);\r\n  background-color: white;\r\n`;\r\n\r\nconst ElColorSchemeOptions = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n`;\r\n\r\nconst ElColorSchemeOption = styled.div`\r\n  height: 30px;\r\n  padding: 0px 15px;\r\n  background-color: var(--color-neutral-400);\r\n  border: 1px solid var(--color-neutral-500);\r\n\r\n  color: var(--color-neutral-500);\r\n\r\n  display: grid;\r\n  justify-items: center;\r\n  align-items: center;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: var(--color-neutral-500);\r\n    background-color: var(--color-neutral-600);\r\n    color: white;\r\n  }\r\n\r\n  ${props =>\r\n    props.active &&\r\n    css`\r\n      background-color: var(--color-neutral-500);\r\n      background-color: var(--color-neutral-600);\r\n      color: white;\r\n    `}\r\n`;\r\n\r\nexport default ColorPicker;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport color from \"color\";\r\nimport ColorGeneratorRow from \"./ColorGeneratorRow\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst NewColorGen = () => {\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [baseColors, setBaseColors] = useState([\r\n    { color: \"#9C999A\", scheme: null },\r\n    { color: \"#FF2EBD\", scheme: \"analogous\" }\r\n  ]);\r\n  const generatedColors = baseColors.map(c => generateColors(c.color));\r\n  const generatedColorSchemes = baseColors\r\n    .map(baseColor =>\r\n      baseColor.scheme === \"analogous\"\r\n        ? [\r\n          color(baseColor.color).rotate(-30),\r\n          color(baseColor.color).rotate(30)\r\n        ]\r\n        : baseColor.scheme === \"complementary\"\r\n          ? [color(baseColor.color).rotate(180)]\r\n          : baseColor.scheme === \"split-complementary\"\r\n            ? [\r\n              color(baseColor.color).rotate(150),\r\n              color(baseColor.color).rotate(210)\r\n            ]\r\n            : baseColor.scheme === \"triadic\"\r\n              ? [\r\n                color(baseColor.color).rotate(-120),\r\n                color(baseColor.color).rotate(120)\r\n              ]\r\n              : baseColor.scheme === \"tetradic\"\r\n                ? [\r\n                  color(baseColor.color).rotate(-180),\r\n                  color(baseColor.color).rotate(-90),\r\n                  color(baseColor.color).rotate(90)\r\n                ]\r\n                : []\r\n    )\r\n    .map(colors => colors.map(c => generateColors(c.hex())));\r\n\r\n  return (\r\n    <ElContainer>\r\n      <h1>Color Theme Generator</h1>\r\n      <ElColorsContainer>\r\n        <ElColors>\r\n          {baseColors.map((baseColor, colorIndex) => {\r\n            const { colors, level } = generatedColors[colorIndex];\r\n            const additionalRows = generatedColorSchemes[colorIndex];\r\n\r\n            return (\r\n              <ElColorRowGroup key={colorIndex}>\r\n                <ColorGeneratorRow\r\n                  colors={colors}\r\n                  level={level}\r\n                  index={colorIndex}\r\n                  editingIndex={editingIndex}\r\n                  setEditingIndex={setEditingIndex}\r\n                />\r\n                {additionalRows.map(({ colors, level }, rowIndex) => (\r\n                  <ColorGeneratorRow\r\n                    key={rowIndex}\r\n                    colors={colors}\r\n                    level={level}\r\n                    showConnector\r\n                  />\r\n                ))}\r\n              </ElColorRowGroup>\r\n            );\r\n          })}\r\n        </ElColors>\r\n        <ElColorPickerContainer>\r\n          {editingIndex !== -1 && (\r\n            <ColorPicker\r\n              key={editingIndex}\r\n              color={baseColors[editingIndex].color}\r\n              setColor={hex => {\r\n                const newBaseColors = [...baseColors];\r\n                newBaseColors[editingIndex].color = hex;\r\n                setBaseColors(newBaseColors);\r\n              }}\r\n              scheme={baseColors[editingIndex].scheme}\r\n              setScheme={scheme => {\r\n                baseColors[editingIndex].scheme = scheme;\r\n                setBaseColors([...baseColors]);\r\n              }}\r\n            />\r\n          )}\r\n        </ElColorPickerContainer>\r\n      </ElColorsContainer>\r\n      <div>\r\n        <div className=\"medium-header\">Export</div>\r\n        <ElExportContainer>\r\n          {baseColors\r\n            .reduce((acc, curr, index) => {\r\n              acc.push(generatedColors[index]);\r\n              acc.push(...generatedColorSchemes[index]);\r\n\r\n              return acc;\r\n            }, [])\r\n            .map(({ colors }, index) =>\r\n              colors\r\n                .map(\r\n                  (c, colorIndex) =>\r\n                    `--color-${index + 1}-${colorIndex * 100 + 100}: ${c};`\r\n                )\r\n                .join(\"\\n\")\r\n            )\r\n            .join(\"\\n\\n\")}\r\n        </ElExportContainer>\r\n      </div>\r\n    </ElContainer>\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  padding: 30px;\r\n\r\n  display: grid;\r\n  grid-gap: 30px;\r\n`;\r\n\r\nconst ElColorsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: minmax(0, 1fr) 490px;\r\n  grid-gap: 30px;\r\n  min-height: 400px;\r\n`;\r\n\r\nconst ElColors = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-content: start;\r\n`;\r\n\r\nconst ElColorRowGroup = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-items: center;\r\n`;\r\n\r\nconst ElColorPickerContainer = styled.div``;\r\n\r\nconst ElExportContainer = styled.div`\r\n  background-color: #484848;\r\n  font-family: \"Roboto Mono\";\r\n  padding: 30px;\r\n  line-height: 25px;\r\n  white-space: pre;\r\n\r\n  color: white;\r\n`;\r\n\r\n// const generateColors = baseColor => {\r\n//   const colors = [baseColor];\r\n\r\n//   while (colors.length < 9) {\r\n//     const lastColor = colors[colors.length - 1];\r\n//     const luminosity = color(lastColor).luminosity();\r\n//     const proximityTo50 = (50 - Math.abs(50 - luminosity * 100)) / 50;\r\n//     const scalingFactor = Math.pow(proximityTo50, 2);\r\n//     console.log({ luminosity, scalingFactor });\r\n//     const increment = 0.15;\r\n//     const nextColor = color(lastColor).lighten(scalingFactor * increment);\r\n\r\n//     colors.push(nextColor.hex());\r\n//   }\r\n\r\n//   return colors;\r\n// };\r\n\r\n// const generateColors = baseColor => {\r\n//   const c = color(baseColor);\r\n//   console.log(\"luminosity\", c.luminosity());\r\n//   console.log(\"lightness\", c.lightness());\r\n//   console.log(\"hex\", c.hex());\r\n\r\n//   const standardRange = [5, 10, 20, 30, 40, 50, 60, 70, 80, 85, 90, 93, 96];\r\n\r\n//   const luminosity = c.lightness();\r\n//   const ROOT = 1.25;\r\n//   const luminositySqrt = Math.pow(luminosity, 1 / ROOT);\r\n//   const luminositySqrtStr = luminositySqrt.toString();\r\n//   const level = Number(luminositySqrtStr[2]);\r\n//   const values = standardRange.map(x => x / 100);\r\n\r\n//   const colorRange = [c.hex()];\r\n//   let darker = color(c);\r\n//   let darkerLimit = 0;\r\n//   while (darker.luminosity() > 0.0 && darkerLimit < 100) {\r\n//     darkerLimit++;\r\n//     darker = darker.darken(0.04);\r\n//     colorRange.unshift(darker.hex());\r\n//   }\r\n//   let lighter = color(c);\r\n//   let lighterLimit = 0;\r\n//   while (lighter.luminosity() < 0.99 && lighterLimit < 100) {\r\n//     lighterLimit++;\r\n//     lighter = lighter.lighten(0.04);\r\n//     colorRange.push(lighter.hex());\r\n//   }\r\n\r\n//   console.log(\r\n//     \"lightness\",\r\n//     colorRange.map(c => color(c).luminosity())\r\n//   );\r\n\r\n//   const closest = standardRange.reduce((prev, curr) =>\r\n//     Math.abs(curr - luminosity * 100) < Math.abs(prev - luminosity * 100)\r\n//       ? curr\r\n//       : prev\r\n//   );\r\n//   const closestIndex = standardRange.indexOf(closest);\r\n//   const offset = luminosity * 100 - closest;\r\n//   const farthestDistance = Math.min(closestIndex, 9 - closestIndex);\r\n\r\n//   const range = values.map(x => Math.pow(x, ROOT));\r\n//   console.log(range);\r\n//   const colors = range.map((lightness, index) => {\r\n//     return colorRange.reduce((prev, curr) =>\r\n//       Math.abs(color(curr).lightness() - lightness) <\r\n//       Math.abs(color(prev).lightness() - lightness)\r\n//         ? curr\r\n//         : prev\r\n//     );\r\n//   });\r\n\r\n//   // return colors;\r\n\r\n//   return colorRange;\r\n// };\r\n\r\nconst generateColors = baseColor => {\r\n  const c = color(baseColor);\r\n\r\n  const luminosity = c.luminosity();\r\n  const ROOT = 1.5;\r\n  const luminositySqrt = Math.pow(luminosity, 1 / ROOT);\r\n  const luminositySqrtStr = luminositySqrt.toString();\r\n  const level = Number(luminositySqrtStr[2]);\r\n\r\n  const values = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(x =>\r\n    Number(`0.${x}${luminositySqrtStr.slice(3)}`)\r\n  );\r\n\r\n  const colorRange = [c.hex()];\r\n  let darker = color(c);\r\n  let darkerLimit = 0;\r\n  while (darker.luminosity() > 0.01 && darkerLimit < 100) {\r\n    darkerLimit++;\r\n    darker = darker.darken(0.02);\r\n    colorRange.unshift(darker.hex());\r\n  }\r\n  let lighter = color(c);\r\n  let lighterLimit = 0;\r\n  while (lighter.luminosity() < 0.99 && lighterLimit < 100) {\r\n    lighterLimit++;\r\n    lighter = lighter.lighten(0.02);\r\n    colorRange.push(lighter.hex());\r\n  }\r\n\r\n  const range = values.map(x => Math.pow(x, ROOT));\r\n  const colors = range.map((luminosity, index) => {\r\n    return colorRange.reduce((prev, curr) =>\r\n      Math.abs(color(curr).luminosity() - luminosity) <\r\n        Math.abs(color(prev).luminosity() - luminosity)\r\n        ? curr\r\n        : prev\r\n    );\r\n  });\r\n\r\n  return { colors, level };\r\n};\r\n\r\nexport default NewColorGen;\r\n","import React from \"react\";\r\nimport \"normalize.css\";\r\nimport \"./transitions.css\";\r\n\r\nimport NewColorGen from \"../NewColorGen\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return <NewColorGen />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}