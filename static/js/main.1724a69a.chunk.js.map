{"version":3,"sources":["components/Header/Header.jsx","components/Layout/Layout.jsx","components/HomePage/HomePage.jsx","components/ColorThemeGenerator/Button.jsx","components/ColorThemeGenerator/Slider.jsx","components/ColorThemeGenerator/SliderGroup.jsx","utils/utils.js","components/ColorThemeGenerator/ColorPicker.jsx","components/ColorThemeGenerator/GeneratorContext.jsx","components/ColorThemeGenerator/ColorSelection.jsx","components/ColorThemeGenerator/GeneratedColorView.jsx","components/ColorThemeGenerator/TintsAndShadesColumn.jsx","components/ColorThemeGenerator/TintsAndShadesVisualizer.jsx","components/ColorThemeGenerator/TextInput.jsx","components/ColorThemeGenerator/RandomizerBaseColorSelect.jsx","classes/Color.js","utils/generators.js","components/ColorThemeGenerator/Randomizer.jsx","components/ColorThemeGenerator/ColorThemeGenerator.jsx","components/ColorGeneratorRow.js","components/MarkerContainer.js","components/ColorPicker.js","components/NewColorGen.js","components/App/App.jsx","serviceWorker.js","index.js"],"names":["styled","div","_templateObject","Layout_templateObject","props","padding","gap","HomePage_templateObject","HomePage","button","Button_templateObject","background","color","Button","Slider_templateObject","input","_templateObject2","SliderGroup_templateObject","SliderGroup_templateObject2","SliderGroup","toPaddedHexString","num","len","str","toString","repeat","length","numbersToHex","r","g","b","concat","clamp","value","min","arguments","undefined","max","Math","round","lerp","a","t","RGBToHSL","rgb","cmin","cmax","delta","h","s","l","abs","HSLToRGB","hsl","c","x","m","HSLToHex","RGBToHex","hexToRGB","hex","parseInt","slice","hexToHSL","Object","toConsumableArray","Array","map","i","random","join","ColorPicker_templateObject","ColorPicker_templateObject2","_templateObject3","_templateObject4","_templateObject5","React","createContext","picker","setPicker","ColorSelection_templateObject","ColorSelection_templateObject2","ColorSelection_templateObject3","attrs","style","backgroundColor","ColorSelection_templateObject4","ColorSelection_templateObject5","_templateObject6","GeneratedColorView_templateObject","TintsAndShadesColumn_templateObject","TintsAndShadesColumn_templateObject2","TintsAndShadesVisualizer_templateObject","TintsAndShadesVisualizer_templateObject2","TintsAndShadesVisualizer_templateObject3","TintsAndShadesVisualizer_templateObject4","TintsAndShadesVisualizer_templateObject5","TintsAndShadesVisualizer_templateObject6","TextInput_templateObject","RandomizerBaseColorSelect_templateObject","RandomizerBaseColorSelect_templateObject2","RandomizerBaseColorSelect","Color","initial","classCallCheck","this","_private","hasOwnProperty","createClass","key","get","randomNumber","floor","randomHue","clampHue","randomLightness","hue","generateAnalagous","baseColor","c2","deviance","Randomizer_templateObject","Randomizer_templateObject2","ColorThemeGenerator_templateObject","ColorThemeGenerator_templateObject2","ColorThemeGenerator_templateObject3","ColorThemeGenerator_templateObject4","ColorThemeGenerator_templateObject5","ColorThemeGenerator_templateObject6","_templateObject7","colors","_templateObject8","_templateObject9","_templateObject10","ColorThemeGenerator","ElContainer","ColorGeneratorRow_templateObject","ElColors","ColorGeneratorRow_templateObject2","ElColor","ColorGeneratorRow_templateObject3","ElColorSelect","ColorGeneratorRow_templateObject4","ElConnector","ColorGeneratorRow_templateObject5","ColorGeneratorRow","_ref","level","index","editingIndex","setEditingIndex","_ref$showConnector","showConnector","react_default","createElement","colorIndex","isLight","onClick","MarkerContainer_templateObject","MarkerContainer","position","setPosition","_ref$width","width","_ref$height","height","rest","objectWithoutProperties","colorPickerRef","useRef","mouseDownRef","useEffect","mouseUpListener","current","mouseMoveListener","e","clientX","getBoundingClientRect","left","clientY","top","document","addEventListener","removeEventListener","MarkerContainer_ElContainer","assign","ref","onMouseDown","target","handleColorSelect","objectSpread","ElColorPickerContainer","components_ColorPicker_templateObject","ElColorPickerBackground","components_ColorPicker_templateObject2","ElColorPickerMarker","ColorPicker_templateObject3","ElColorPickerHueMarker","ColorPicker_templateObject4","ElColorSchemeOptions","ColorPicker_templateObject5","ElColorSchemeOption","ColorPicker_templateObject6","active","css","ColorPicker_templateObject7","ColorPicker","_ref$color","defaultColor","setColor","scheme","setScheme","_useMemo","useMemo","defaultHuePosition","defaultHue","rotate","console","log","hueRGB","array","base","apply","y","baseSaturated","defaultMarkerPosition","_useState","useState","_useState2","slicedToArray","pickerColor","setPickerColor","_useState3","_useState4","markerPosition","setMarkerPosition","_useState5","_useState6","huePosition","setHuePosition","selectedColor","timeout","setTimeout","clearTimeout","components_MarkerContainer","label","o","NewColorGen_templateObject","ElColorsContainer","NewColorGen_templateObject2","NewColorGen_templateObject3","ElColorRowGroup","NewColorGen_templateObject4","NewColorGen_templateObject5","ElExportContainer","NewColorGen_templateObject6","generateColors","luminosity","luminositySqrtStr","pow","Number","values","colorRange","darker","darkerLimit","darken","unshift","lighter","lighterLimit","lighten","push","reduce","prev","curr","NewColorGen","baseColors","setBaseColors","generatedColors","generatedColorSchemes","NewColorGen_ElContainer","NewColorGen_ElColors","_generatedColors$colo","additionalRows","components_ColorGeneratorRow","rowIndex","NewColorGen_ElColorPickerContainer","components_ColorPicker","newBaseColors","className","acc","_ref2","App","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1724a69a.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HeaderDiv = styled.div`\r\n\tbackground-color: var(--color-neutral-1);\r\n\tcolor: var(--color-dark-foreground);\r\n\r\n\tpadding: 0px var(--spacing-large);\r\n\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-large);\r\n\tgrid-auto-flow: column;\r\n\talign-items: center;\r\n\tjustify-content: start;\r\n`;\r\n\r\nfunction Header() {\r\n\treturn (\r\n\t\t<HeaderDiv>\r\n\t\t\t<div>Header</div>\r\n\t\t\t<div>Item 1</div>\r\n\t\t\t<div>Item 2</div>\r\n\t\t</HeaderDiv>\r\n\t);\r\n}\r\n\r\nexport default Header;\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst LayoutDiv = styled.div`\r\n\tpadding: ${props => props.padding};\r\n\r\n\tdisplay: grid;\r\n\tgrid-gap: ${props => props.gap};\r\n`;\r\n\r\nfunction Layout({ gap = 'var(--spacing-large)', padding = 0, children }) {\r\n\treturn (\r\n\t\t<LayoutDiv gap={gap} padding={padding}>\r\n\t\t\t{children}\r\n\t\t</LayoutDiv>\r\n\t);\r\n}\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from '../Header/Header';\r\nimport Layout from '../Layout/Layout';\r\n\r\nconst HomePageDiv = styled.div`\r\n\theight: 100%;\r\n\r\n\tbackground-color: var(--background-light-color);\r\n\r\n\tdisplay: grid;\r\n\tgrid-template-rows: var(--spacing-xl) 1fr;\r\n`;\r\n\r\nfunction HomePage() {\r\n\treturn (\r\n\t\t<HomePageDiv>\r\n\t\t\t<Header />\r\n\t\t\t<Layout padding=\"var(--spacing-large)\">\r\n\t\t\t\t<div>TEST 1</div>\r\n\t\t\t\t<div>TEST 2</div>\r\n\t\t\t</Layout>\r\n\t\t</HomePageDiv>\r\n\t);\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledButton = styled.button`\r\n\tbackground-color: ${props => props.background || 'red'};\r\n\tcolor: ${props => props.color || 'red'};\r\n\r\n\tpadding: 0px var(--spacing-medium);\r\n\tborder: none;\r\n\tdisplay: grid;\r\n\talign-items: center;\r\n\r\n\tmin-height: 32px;\r\n\tborder-radius: 3px;\r\n\r\n\ttransition: 0.25s;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: #44eeee;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nconst BUTTON_THEMES = {\r\n\tprimary: {\r\n\t\tbackground: '#44dddd',\r\n\t\tcolor: '#222222'\r\n\t},\r\n\tsecondary: {\r\n\t\tbackground: 'transparent',\r\n\t\tcolor: '#ffffff'\r\n\t}\r\n};\r\n\r\nfunction Button({ value, onClick, children, theme }) {\r\n\tconst buttonStyle = BUTTON_THEMES[theme];\r\n\r\n\treturn (\r\n\t\t<StyledButton value={value} onClick={onClick} {...buttonStyle}>\r\n\t\t\t{children}\r\n\t\t</StyledButton>\r\n\t);\r\n}\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n\tdisplay: grid;\r\n\talign-items: center;\r\n`;\r\n\r\nconst Input = styled.input`\r\n\t-webkit-appearance: none; /* Override default CSS styles */\r\n\tappearance: none;\r\n\twidth: 100%;\r\n\theight: 10px;\r\n\tborder-radius: 10px;\r\n\t/* background: #d3d3d3; */\r\n\tbackground: ${props => props.background || '#d3d3d3'};\r\n\toutline: none;\r\n\topacity: 0.7;\r\n\ttransition: 0.2s;\r\n\r\n\t:hover {\r\n\t\topacity: 1;\r\n\t}\r\n\r\n\t::-webkit-slider-thumb {\r\n\t\t-webkit-appearance: none;\r\n\t\tappearance: none;\r\n\t\twidth: 25px;\r\n\t\theight: 25px;\r\n\t\tborder-radius: 20px;\r\n\t\tbackground: #33dddd;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t::-moz-range-thumb {\r\n\t\twidth: 25px;\r\n\t\theight: 25px;\r\n\t\tborder-radius: 20px;\r\n\t\tbackground: #33dddd;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nfunction Slider({ ...rest }) {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Input {...rest} type=\"range\" />\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Slider from './Slider';\r\n\r\nconst Container = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr auto;\r\n\tgrid-gap: var(--spacing-small);\r\n`;\r\n\r\nconst SliderContainer = styled.div`\r\n\tgrid-column: span 2;\r\n`;\r\n\r\nfunction SliderGroup({ id, label, extra, ...rest }) {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<label htmlFor={id}>{label}</label>\r\n\t\t\t<div>{extra}</div>\r\n\t\t\t<SliderContainer>\r\n\t\t\t\t<Slider id={id} {...rest} />\r\n\t\t\t</SliderContainer>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default SliderGroup;\r\n","const toPaddedHexString = (num, len) => {\r\n  const str = num.toString(16);\r\n  return \"0\".repeat(len - str.length) + str;\r\n};\r\n\r\nconst numbersToHex = (r, g, b) =>\r\n  `#${toPaddedHexString(r, 2)}${toPaddedHexString(g, 2)}${toPaddedHexString(\r\n    b,\r\n    2\r\n  )}`;\r\n\r\nexport const clamp = (value, min = 0, max = 1) =>\r\n  Math.round(Math.min(Math.max(value, min), max));\r\n\r\nexport const clamp0to255 = value =>\r\n  Math.round(Math.min(Math.max(value, 0), 255));\r\n\r\nexport const lerp = (a, b, t) => a + (b - a) * t;\r\n\r\nexport const RGBToHSL = rgb => {\r\n  // Make r, g, and b fractions of 1\r\n  const r = (rgb.r /= 255);\r\n  const g = (rgb.g /= 255);\r\n  const b = (rgb.b /= 255);\r\n\r\n  // Find greatest and smallest channel values\r\n  let cmin = Math.min(r, g, b);\r\n  let cmax = Math.max(r, g, b);\r\n  let delta = cmax - cmin;\r\n  let h = 0;\r\n  let s = 0;\r\n  let l = 0;\r\n\r\n  // Calculate hue\r\n  // No difference\r\n  if (delta == 0) h = 0;\r\n  // Red is max\r\n  else if (cmax == r) h = ((g - b) / delta) % 6;\r\n  // Green is max\r\n  else if (cmax == g) h = (b - r) / delta + 2;\r\n  // Blue is max\r\n  else h = (r - g) / delta + 4;\r\n\r\n  h = Math.round(h * 60);\r\n\r\n  // Make negative hues positive behind 360°\r\n  if (h < 0) h += 360;\r\n\r\n  // Calculate lightness\r\n  l = (cmax + cmin) / 2;\r\n\r\n  // Calculate saturation\r\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n\r\n  // Multiply l and s by 100\r\n  s = Math.abs(s * 100);\r\n  l = Math.abs(l * 100);\r\n\r\n  return { h, s, l };\r\n};\r\n\r\nexport const HSLToRGB = hsl => {\r\n  // Must be fractions of 1\r\n  const h = hsl.h;\r\n  const s = hsl.s / 100;\r\n  const l = hsl.l / 100;\r\n\r\n  let c = (1 - Math.abs(2 * l - 1)) * s,\r\n    x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r\n    m = l - c / 2,\r\n    r = 0,\r\n    g = 0,\r\n    b = 0;\r\n\r\n  if (0 <= h && h < 60) {\r\n    r = c;\r\n    g = x;\r\n    b = 0;\r\n  } else if (60 <= h && h < 120) {\r\n    r = x;\r\n    g = c;\r\n    b = 0;\r\n  } else if (120 <= h && h < 180) {\r\n    r = 0;\r\n    g = c;\r\n    b = x;\r\n  } else if (180 <= h && h < 240) {\r\n    r = 0;\r\n    g = x;\r\n    b = c;\r\n  } else if (240 <= h && h < 300) {\r\n    r = x;\r\n    g = 0;\r\n    b = c;\r\n  } else if (300 <= h && h < 360) {\r\n    r = c;\r\n    g = 0;\r\n    b = x;\r\n  }\r\n  r = Math.round((r + m) * 255);\r\n  g = Math.round((g + m) * 255);\r\n  b = Math.round((b + m) * 255);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nexport const HSLToHex = hsl => {\r\n  const rgb = HSLToRGB(hsl);\r\n\r\n  return RGBToHex(rgb);\r\n};\r\n\r\nexport const getTextDark = color => {\r\n  const rgb = hexToRGB(color);\r\n  return rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114 > 186;\r\n};\r\n\r\nexport const hexToRGB = hex => {\r\n  const r = parseInt(hex.slice(1, 3), 16);\r\n  const g = parseInt(hex.slice(3, 5), 16);\r\n  const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nexport const hexToHSL = hex => {\r\n  const rgb = hexToRGB(hex);\r\n  return RGBToHSL(rgb);\r\n};\r\n\r\nexport const RGBToHex = rgb => numbersToHex(rgb.r, rgb.g, rgb.b);\r\n\r\nexport const generateHue = (color, gain) => {\r\n  const r0 = color.rgb.r;\r\n  const g0 = color.rgb.g;\r\n  const b0 = color.rgb.b;\r\n\r\n  const mult = Math.abs(gain / 100);\r\n  const target = gain > 0 ? 255 : 0;\r\n\r\n  const r = clamp0to255(lerp(r0, target, mult));\r\n  const g = clamp0to255(lerp(g0, target, mult));\r\n  const b = clamp0to255(lerp(b0, target, mult));\r\n\r\n  return RGBToHex({ r, g, b });\r\n};\r\n\r\nexport const combineRGB = (tarhexToRGB, addedRGB, strength) => {\r\n  const totalAdd = addedRGB.r + addedRGB.g + addedRGB.b;\r\n  const averageAdd = clamp0to255((totalAdd / 3) * strength);\r\n  const r = clamp0to255(tarhexToRGB.r + addedRGB.r * strength - averageAdd);\r\n  const g = clamp0to255(tarhexToRGB.g + addedRGB.g * strength - averageAdd);\r\n  const b = clamp0to255(tarhexToRGB.b + addedRGB.b * strength - averageAdd);\r\n\r\n  return numbersToHex(r, g, b);\r\n};\r\n\r\nexport const generateRandomString = [...Array(10)]\r\n  .map(i => (~~(Math.random() * 36)).toString(36))\r\n  .join(\"\");\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { SketchPicker } from 'react-color';\r\nimport Button from './Button';\r\nimport SliderGroup from './SliderGroup';\r\nimport { hexToRGB, RGBToHSL, HSLToRGB, RGBToHex } from '../../utils/utils';\r\n\r\nconst ContainerDiv = styled.div`\r\n\tpadding: 20px;\r\n\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-medium);\r\n\tgrid-template-rows: auto auto 36px;\r\n\r\n\tbackground-color: #555555;\r\n\tcolor: white;\r\n`;\r\n\r\nconst ContainerInner = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-medium);\r\n\tgrid-template-columns: auto 300px;\r\n`;\r\n\r\nconst HeaderDiv = styled.div`\r\n\ttext-align: center;\r\n`;\r\n\r\nconst PickerContainer = styled.div`\r\n\tbackground-color: white;\r\n`;\r\n\r\nconst SlidersContainer = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-medium);\r\n\r\n\talign-content: start;\r\n`;\r\n\r\nfunction ColorPicker({ color, onChange, onClose }) {\r\n\tconst hsl = color.hsl;\r\n\r\n\tconst handleHSLChange = (target, value) => {\r\n\t\tconst newHSL = { ...hsl, [target]: value };\r\n\t\tnewHSL[target] = value;\r\n\t\tonChange(newHSL);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ContainerDiv>\r\n\t\t\t<HeaderDiv>Select a color</HeaderDiv>\r\n\r\n\t\t\t<ContainerInner>\r\n\t\t\t\t<PickerContainer>\r\n\t\t\t\t\t<SketchPicker color={color.hex} onChange={value => onChange(value.hex)} disableAlpha width={500} />\r\n\t\t\t\t</PickerContainer>\r\n\t\t\t\t<SlidersContainer>\r\n\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\tid=\"hsl-h\"\r\n\t\t\t\t\t\tlabel=\"Hue\"\r\n\t\t\t\t\t\textra={`${hsl.h}`}\r\n\t\t\t\t\t\tvalue={hsl.h}\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax=\"359\"\r\n\t\t\t\t\t\tonChange={e => handleHSLChange('h', e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\tid=\"hsl-s\"\r\n\t\t\t\t\t\tlabel=\"Saturation\"\r\n\t\t\t\t\t\textra={`${Math.round(hsl.s)}%`}\r\n\t\t\t\t\t\tvalue={hsl.s}\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\tonChange={e => handleHSLChange('s', e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\tid=\"hsl-l\"\r\n\t\t\t\t\t\tlabel=\"Lightness\"\r\n\t\t\t\t\t\textra={`${Math.round(hsl.l)}%`}\r\n\t\t\t\t\t\tvalue={hsl.l}\r\n\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\tonChange={e => handleHSLChange('l', e.target.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</SlidersContainer>\r\n\t\t\t</ContainerInner>\r\n\r\n\t\t\t<Button onClick={onClose} theme=\"primary\">\r\n\t\t\t\tOK\r\n\t\t\t</Button>\r\n\t\t</ContainerDiv>\r\n\t);\r\n}\r\n\r\nexport default ColorPicker;\r\n","import React from 'react';\r\n\r\nconst GeneratorContext = React.createContext({\r\n\tpicker: null,\r\n\tsetPicker: null\r\n});\r\n\r\nexport default GeneratorContext;\r\n","import React, { useState, useContext } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\nimport { Manager, Reference, Popper } from 'react-popper';\r\nimport ColorPicker from './ColorPicker';\r\nimport GeneratorContext from './GeneratorContext';\r\nimport { getTextDark } from '../../utils/utils';\r\nimport Button from './Button';\r\n\r\nconst ColorSelectionDiv = styled.div`\r\n\tposition: relative;\r\n\r\n\tdisplay: grid;\r\n\tgrid-template-rows: 300px auto;\r\n`;\r\n\r\nconst ColorBlockContainer = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr 1fr;\r\n\tgrid-template-rows: 50% 25% 25%;\r\n\r\n\t:hover {\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nconst ColorBlockLabel = styled.div`\r\n\tgrid-column: span 2;\r\n\r\n\tfont-size: 24px;\r\n\r\n\tjustify-self: center;\r\n\talign-self: center;\r\n`;\r\n\r\nconst ColorBlock = styled.div.attrs(props => ({ style: { backgroundColor: props.color } }))``;\r\n\r\nconst ColorSelectionControl = styled.div`\r\n\tpadding: 10px;\r\n\r\n\tdisplay: grid;\r\n\tgrid-gap: 10px;\r\n\tgrid-template-columns: 1fr auto;\r\n\talign-items: center;\r\n`;\r\n\r\nconst Arrow = styled.div`\r\n\tposition: absolute;\r\n\ttop: -20px;\r\n\tborder-left: 18px solid transparent;\r\n\tborder-right: 18px solid transparent;\r\n\tborder-bottom: 20px solid #555555;\r\n`;\r\n\r\nfunction ColorSelection({ index }) {\r\n\tconst { colorsCalculated, neutrals, onColorChange, picker, setPicker } = useContext(GeneratorContext);\r\n\r\n\tconst color = colorsCalculated[index];\r\n\r\n\tconst handleClick = (e, open) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\r\n\t\tsetPicker(open ? index : null);\r\n\t};\r\n\r\n\tconst c = colorsCalculated[index];\r\n\tconst tcColor = getTextDark(c.color.hex) ? 'black' : 'white';\r\n\t// const tcLight = getTextDark(c.light) ? '#000000' : '#ffffff';\r\n\t// const tcLighter = getTextDark(c.lighter) ? '#000000' : '#ffffff';\r\n\t// const tcDark = getTextDark(c.dark) ? '#000000' : '#ffffff';\r\n\t// const tcDarker = getTextDark(c.darker) ? '#000000' : '#ffffff';\r\n\r\n\treturn (\r\n\t\t<Manager>\r\n\t\t\t<Reference>\r\n\t\t\t\t{({ ref }) => (\r\n\t\t\t\t\t<ColorSelectionDiv>\r\n\t\t\t\t\t\t<ColorBlockContainer ref={ref} onClick={e => handleClick(e, true)} style={{ background: color.color.hex }}>\r\n\t\t\t\t\t\t\t<ColorBlockLabel style={{ color: tcColor }}>{color.color.hex}</ColorBlockLabel>\r\n\t\t\t\t\t\t\t<ColorBlock color={color.light} />\r\n\t\t\t\t\t\t\t<ColorBlock color={color.dark} />\r\n\t\t\t\t\t\t\t<ColorBlock color={color.lighter} />\r\n\t\t\t\t\t\t\t<ColorBlock color={color.darker} />\r\n\t\t\t\t\t\t</ColorBlockContainer>\r\n\r\n\t\t\t\t\t\t<ColorSelectionControl>\r\n\t\t\t\t\t\t\t<div>{color.color.hex}</div>\r\n\t\t\t\t\t\t\t<Button theme=\"secondary\">Remove</Button>\r\n\t\t\t\t\t\t</ColorSelectionControl>\r\n\t\t\t\t\t</ColorSelectionDiv>\r\n\t\t\t\t)}\r\n\t\t\t</Reference>\r\n\t\t\t{picker === index &&\r\n\t\t\t\tReactDOM.createPortal(\r\n\t\t\t\t\t<Popper\r\n\t\t\t\t\t\tmodifiers={{\r\n\t\t\t\t\t\t\toffset: { offset: '0, 10' }\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{({ ref, style, placement, arrowProps }) => (\r\n\t\t\t\t\t\t\t<div ref={ref} style={style} data-placement={placement} onClick={e => e.stopPropagation()}>\r\n\t\t\t\t\t\t\t\t<Arrow ref={arrowProps.ref} style={arrowProps.style} />\r\n\t\t\t\t\t\t\t\t<ColorPicker color={color.color} onClose={e => handleClick(e, false)} onChange={color => onColorChange(index, color)} />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Popper>,\r\n\t\t\t\t\tdocument.querySelector('body')\r\n\t\t\t\t)}\r\n\t\t</Manager>\r\n\t);\r\n}\r\n\r\nexport default ColorSelection;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-rows: 100px auto;\r\n\tgrid-gap: var(--spacing-small);\r\n`;\r\n\r\nfunction GeneratedColorView({ color }) {\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<div style={{ backgroundColor: color }} />\r\n\t\t\t<div>{color}</div>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default GeneratedColorView;\r\n","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { generateHue, getTextDark } from '../../utils/utils';\r\n\r\nconst ContainerDiv = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-auto-flow: row;\r\n`;\r\n\r\nconst RowDiv = styled.div`\r\n\tpadding: 2px var(--spacing-medium);\r\n\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr 1fr;\r\n\talign-items: center;\r\n\tjustify-items: center;\r\n\r\n\t.view-granularity {\r\n\t\topacity: 0;\r\n\t}\r\n\r\n\t&:hover .view-granularity {\r\n\t\topacity: 1;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nfunction TintsAndShadesColumn({ color, increment }) {\r\n\tconst scale = useMemo(() => {\r\n\t\tlet c = increment;\r\n\t\tlet cc = 0;\r\n\t\tconst scalePre = [0];\r\n\t\twhile (c < 100 && cc < 100) {\r\n\t\t\tscalePre.unshift(c);\r\n\t\t\tscalePre.push(-c);\r\n\r\n\t\t\tc += increment;\r\n\t\t\tcc++;\r\n\t\t}\r\n\r\n\t\tconst scale = scalePre.map(changeValue => {\r\n\t\t\tconst newHex = generateHue(color, changeValue);\r\n\t\t\tconst textColor = getTextDark(newHex) ? 'black' : 'white';\r\n\r\n\t\t\treturn {\r\n\t\t\t\thex: newHex,\r\n\t\t\t\ttextColor,\r\n\t\t\t\tchange: changeValue === 0 ? '―' : `${Math.abs(changeValue)}% ${changeValue > 0 ? 'lighter' : 'darker'}`,\r\n\t\t\t\tchangeValue\r\n\t\t\t};\r\n\t\t});\r\n\r\n\t\treturn scale;\r\n\t}, [color, increment]);\r\n\r\n\treturn (\r\n\t\t<ContainerDiv>\r\n\t\t\t{scale.map((c, i) => (\r\n\t\t\t\t<RowDiv key={i} style={{ backgroundColor: c.hex, color: c.textColor }}>\r\n\t\t\t\t\t<div>{c.change}</div>\r\n\t\t\t\t\t<div>{c.hex}</div>\r\n\t\t\t\t</RowDiv>\r\n\t\t\t))}\r\n\t\t</ContainerDiv>\r\n\t);\r\n}\r\n\r\nexport default TintsAndShadesColumn;\r\n","import React, { useState, useContext } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport GeneratorContext from './GeneratorContext';\r\nimport TintsAndShadesColumn from './TintsAndShadesColumn';\r\nimport Button from './Button';\r\n\r\nconst ContainerDiv = styled.div`\r\n\tposition: fixed;\r\n\tleft: 0;\r\n\tright: 0;\r\n\ttop: 0;\r\n\tbottom: 0;\r\n\r\n\tz-index: 1;\r\n\r\n\tcolor: white;\r\n\tbackground-color: black;\r\n\r\n\tdisplay: grid;\r\n\tgrid-template-rows: auto 1fr auto;\r\n\toverflow-y: auto;\r\n`;\r\n\r\nconst ContainerHeaderDiv = styled.div`\r\n\tposition: relative;\r\n\r\n\tfont-size: 30px;\r\n\ttext-align: center;\r\n\tpadding: var(--spacing-large) 0px;\r\n`;\r\n\r\nconst PercentControlLayoutDiv = styled.div`\r\n\tposition: absolute;\r\n\ttop: var(--spacing-large);\r\n\tright: var(--spacing-large);\r\n\r\n\tdisplay: grid;\r\n\tgrid-auto-flow: column;\r\n\tgrid-gap: var(--spacing-small);\r\n`;\r\n\r\nconst PercentControlDiv = styled.div`\r\n\tborder: 1px solid white;\r\n\tpadding: 0px var(--spacing-small);\r\n\r\n\tcursor: pointer;\r\n\r\n\t&:hover {\r\n\t\tcolor: var(--color-primary);\r\n\t\tborder: 1px solid var(--color-primary);\r\n\t}\r\n`;\r\n\r\nconst ContainerFooterDiv = styled.div`\r\n\tfont-size: 24px;\r\n\ttext-align: center;\r\n\tpadding: var(--spacing-large) 0px;\r\n\tcursor: pointer;\r\n\ttransition: 500ms;\r\n`;\r\n\r\nconst ColorAccordionLayoutDiv = styled.div`\r\n\tdisplay: grid;\r\n`;\r\n\r\nfunction TintsAndShadesVisualizer() {\r\n\tconst { colors } = useContext(GeneratorContext);\r\n\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\tconst [increment, setIncrement] = useState(10);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button theme=\"primary\" onClick={() => setIsOpen(true)}>\r\n\t\t\t\tTints and Shades\r\n\t\t\t</Button>\r\n\r\n\t\t\t{ReactDOM.createPortal(\r\n\t\t\t\t<CSSTransition in={isOpen} timeout={300} classNames=\"fade\" unmountOnExit>\r\n\t\t\t\t\t<ContainerDiv>\r\n\t\t\t\t\t\t<ContainerHeaderDiv>\r\n\t\t\t\t\t\t\tTINTS AND SHADES\r\n\t\t\t\t\t\t\t<PercentControlLayoutDiv>\r\n\t\t\t\t\t\t\t\t<PercentControlDiv\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'var(--spacing-small)', border: '1px solid white', padding: '0px var(--spacing-small)' }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setIncrement(1)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t1 %\r\n\t\t\t\t\t\t\t\t</PercentControlDiv>\r\n\t\t\t\t\t\t\t\t<PercentControlDiv\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'var(--spacing-small)', border: '1px solid white', padding: '0px var(--spacing-small)' }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setIncrement(2)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t2 %\r\n\t\t\t\t\t\t\t\t</PercentControlDiv>\r\n\t\t\t\t\t\t\t\t<PercentControlDiv\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'var(--spacing-small)', border: '1px solid white', padding: '0px var(--spacing-small)' }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setIncrement(4)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t4 %\r\n\t\t\t\t\t\t\t\t</PercentControlDiv>\r\n\t\t\t\t\t\t\t\t<PercentControlDiv\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'var(--spacing-small)', border: '1px solid white', padding: '0px var(--spacing-small)' }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setIncrement(5)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t5 %\r\n\t\t\t\t\t\t\t\t</PercentControlDiv>\r\n\t\t\t\t\t\t\t\t<PercentControlDiv\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'var(--spacing-small)', border: '1px solid white', padding: '0px var(--spacing-small)' }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setIncrement(8)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t8 %\r\n\t\t\t\t\t\t\t\t</PercentControlDiv>\r\n\t\t\t\t\t\t\t\t<PercentControlDiv\r\n\t\t\t\t\t\t\t\t\tstyle={{ marginLeft: 'var(--spacing-small)', border: '1px solid white', padding: '0px var(--spacing-small)' }}\r\n\t\t\t\t\t\t\t\t\tonClick={() => setIncrement(10)}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t10 %\r\n\t\t\t\t\t\t\t\t</PercentControlDiv>\r\n\t\t\t\t\t\t\t</PercentControlLayoutDiv>\r\n\t\t\t\t\t\t</ContainerHeaderDiv>\r\n\t\t\t\t\t\t<ColorAccordionLayoutDiv style={{ gridTemplateColumns: `repeat(${colors.length}, 1fr)` }}>\r\n\t\t\t\t\t\t\t{colors.map((color, colorIndex) => (\r\n\t\t\t\t\t\t\t\t<TintsAndShadesColumn color={color} key={colorIndex} increment={increment} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ColorAccordionLayoutDiv>\r\n\t\t\t\t\t\t<ContainerFooterDiv onClick={() => setIsOpen(false)}>Close</ContainerFooterDiv>\r\n\t\t\t\t\t</ContainerDiv>\r\n\t\t\t\t</CSSTransition>,\r\n\t\t\t\tdocument.querySelector('#root')\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default TintsAndShadesVisualizer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InputDiv = styled.input``;\r\n\r\nfunction TextInput({ value, onChange }) {\r\n\treturn <InputDiv type=\"text\" value={value} onChange={e => onChange(e.target.value)} />;\r\n}\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TextInput from './TextInput';\r\n\r\nconst ContainerDiv = styled.div`\r\n\tmargin: auto;\r\n\tmargin-bottom: var(--spacing-large);\r\n`;\r\n\r\nconst HeaderDiv = styled.div`\r\n\tcolor: white;\r\n\tmargin-bottom: var(--spacing-small);\r\n\ttext-align: center;\r\n`;\r\n\r\nfunction RandomizerBaseColorSelect({ color, setColor }) {\r\n\treturn (\r\n\t\t<ContainerDiv>\r\n\t\t\t<HeaderDiv>Base Color</HeaderDiv>\r\n\t\t\t<TextInput value={color} onChange={newColor => setColor(newColor)} />\r\n\t\t</ContainerDiv>\r\n\t);\r\n}\r\n\r\nexport default RandomizerBaseColorSelect;\r\n","import { RGBToHSL, RGBToHex, HSLToRGB, HSLToHex, hexToRGB, hexToHSL } from '../utils/utils';\r\n\r\nexport class Color {\r\n\t_private = {}; // Do not use outside\r\n\r\n\tconstructor(initial) {\r\n\t\tthis._private.rgb = { r: 0, g: 0, b: 0 };\r\n\t\tthis._private.hsl = { h: 0, s: 0, l: 0 };\r\n\t\tthis._private.hex = '#000000';\r\n\r\n\t\tif (initial.hasOwnProperty('r') && initial.hasOwnProperty('g') && initial.hasOwnProperty('b')) {\r\n\t\t\tthis._private.rgb = initial;\r\n\t\t\tthis._private.hsl = RGBToHSL(initial);\r\n\t\t\tthis._private.hex = RGBToHex(initial);\r\n\t\t} else if (initial.hasOwnProperty('h') && initial.hasOwnProperty('s') && initial.hasOwnProperty('l')) {\r\n\t\t\tthis._private.rgb = HSLToRGB(initial);\r\n\t\t\tthis._private.hsl = initial;\r\n\t\t\tthis._private.hex = HSLToHex(initial);\r\n\t\t} else if (typeof initial === 'string') {\r\n\t\t\tthis._private.rgb = hexToRGB(initial);\r\n\t\t\tthis._private.hsl = hexToHSL(initial);\r\n\t\t\tthis._private.hex = initial;\r\n\t\t}\r\n\t}\r\n\r\n\tget rgb() {\r\n\t\treturn this._private.rgb;\r\n\t}\r\n\r\n\tget hsl() {\r\n\t\treturn this._private.hsl;\r\n\t}\r\n\r\n\tget hex() {\r\n\t\treturn this._private.hex;\r\n\t}\r\n\r\n\tsetColor(initial) {\r\n\t\tif (initial.hasOwnProperty('r') && initial.hasOwnProperty('g') && initial.hasOwnProperty('b')) {\r\n\t\t\tthis._private.rgb = initial;\r\n\t\t\tthis._private.hsl = RGBToHSL(initial);\r\n\t\t\tthis._private.hex = RGBToHex(initial);\r\n\t\t} else if (initial.hasOwnProperty('h') && initial.hasOwnProperty('s') && initial.hasOwnProperty('l')) {\r\n\t\t\tthis._private.rgb = HSLToRGB(initial);\r\n\t\t\tthis._private.hsl = initial;\r\n\t\t\tthis._private.hex = HSLToHex(initial);\r\n\t\t} else if (typeof initial === 'string') {\r\n\t\t\tthis._private.rgb = hexToRGB(initial);\r\n\t\t\tthis._private.hsl = hexToHSL(initial);\r\n\t\t\tthis._private.hex = initial;\r\n\t\t}\r\n\t}\r\n}\r\n","import { Color } from '../classes/Color';\r\n\r\nconst randomNumber = (min = 0, max = 100) => min + Math.floor(Math.random() * (max - min));\r\n\r\nconst randomHue = () => clampHue(Math.floor(Math.random() * 360));\r\n\r\nconst randomSaturation = (min, max) => min + Math.floor(Math.random() * (max - min));\r\n\r\nconst randomLightness = (min, max) => min + Math.floor(Math.random() * (max - min));\r\n\r\nconst clampHue = hue => (hue < 0 ? hue + 360 : hue % 360);\r\n\r\nexport const generateMonochromatic = baseColor => {\r\n\tconst c0 = baseColor\r\n\t\t? new Color(baseColor)\r\n\t\t: new Color({\r\n\t\t\t\th: randomHue(),\r\n\t\t\t\ts: randomNumber(60, 100),\r\n\t\t\t\tl: randomNumber(50, 90)\r\n\t\t  });\r\n\r\n\tconst c1 = new Color({\r\n\t\th: c0.hsl.h,\r\n\t\ts: randomNumber(15, 50),\r\n\t\tl: randomNumber(30, 70)\r\n\t});\r\n\r\n\treturn [c0, c1];\r\n};\r\n\r\nexport const generateAnalagous = baseColor => {\r\n\tconst c2 = baseColor\r\n\t\t? new Color(baseColor)\r\n\t\t: new Color({\r\n\t\t\t\th: randomHue(),\r\n\t\t\t\ts: randomSaturation(50, 100),\r\n\t\t\t\tl: randomLightness(50, 70)\r\n\t\t  });\r\n\r\n\tconst deviance = randomNumber(30, 60);\r\n\tconst s = randomNumber(20, 50);\r\n\tconst l = randomNumber(40, 90);\r\n\r\n\tconst c1 = new Color({\r\n\t\th: clampHue(c2.hsl.h - deviance),\r\n\t\ts,\r\n\t\tl\r\n\t});\r\n\tconst c3 = new Color({\r\n\t\th: clampHue(c2.hsl.h + deviance),\r\n\t\ts,\r\n\t\tl\r\n\t});\r\n\r\n\treturn [c1, c2, c3];\r\n};\r\n\r\nexport const generateComplementary = baseColor => {\r\n\tconst c0 = baseColor\r\n\t\t? new Color(baseColor)\r\n\t\t: new Color({\r\n\t\t\t\th: randomHue(),\r\n\t\t\t\ts: randomNumber(30, 70),\r\n\t\t\t\tl: randomNumber(30, 70)\r\n\t\t  });\r\n\r\n\tconst c1 = new Color({\r\n\t\th: clampHue(c0.hsl.h + 180),\r\n\t\ts: randomNumber(30, 70),\r\n\t\tl: randomNumber(30, 70)\r\n\t});\r\n\r\n\treturn [c0, c1];\r\n};\r\n\r\nexport const generateSplitComplementary = baseColor => {\r\n\tconst c0 = baseColor\r\n\t\t? new Color(baseColor)\r\n\t\t: new Color({\r\n\t\t\t\th: randomHue(),\r\n\t\t\t\ts: randomNumber(50, 90),\r\n\t\t\t\tl: randomNumber(50, 70)\r\n\t\t  });\r\n\r\n\tconst deviance = 60;\r\n\tconst h1 = clampHue(c0.hsl.h + 180 - deviance);\r\n\tconst h2 = clampHue(c0.hsl.h + 180 + deviance);\r\n\r\n\tconst s = randomNumber(20, 50);\r\n\tconst l = randomNumber(40, 90);\r\n\r\n\treturn [\r\n\t\tc0,\r\n\t\tnew Color({\r\n\t\t\th: h1,\r\n\t\t\ts,\r\n\t\t\tl\r\n\t\t}),\r\n\t\tnew Color({\r\n\t\t\th: h2,\r\n\t\t\ts,\r\n\t\t\tl\r\n\t\t})\r\n\t];\r\n};\r\n\r\nexport const generateTetradic = baseColor => {\r\n\tconst c0 = baseColor\r\n\t\t? new Color(baseColor)\r\n\t\t: new Color({\r\n\t\t\t\th: randomHue(),\r\n\t\t\t\ts: randomNumber(50, 90),\r\n\t\t\t\tl: randomNumber(40, 90)\r\n\t\t  });\r\n\tconst h1 = clampHue(c0.hsl.h + 180);\r\n\tconst h2 = randomNumber(-1, 1) > 0 ? clampHue(c0.hsl.h + randomNumber(30, 90)) : clampHue(c0.hsl.h + randomNumber(-30, -90));\r\n\tconst h3 = clampHue(h2 + 180);\r\n\r\n\treturn [\r\n\t\tc0,\r\n\t\tnew Color({\r\n\t\t\th: h1,\r\n\t\t\ts: randomNumber(10, 20),\r\n\t\t\tl: randomNumber(40, 90)\r\n\t\t}),\r\n\t\tnew Color({\r\n\t\t\th: h2,\r\n\t\t\ts: randomNumber(10, 20),\r\n\t\t\tl: randomNumber(40, 90)\r\n\t\t}),\r\n\t\tnew Color({\r\n\t\t\th: h3,\r\n\t\t\ts: randomNumber(10, 20),\r\n\t\t\tl: randomNumber(40, 90)\r\n\t\t})\r\n\t];\r\n};\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\nimport RandomizerBaseColorSelect from './RandomizerBaseColorSelect';\r\nimport * as generators from '../../utils/generators';\r\n\r\nconst Container = styled.div`\r\n\tdisplay: grid;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n\tmargin: auto;\r\n\twidth: auto;\r\n\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-medium);\r\n\tgrid-auto-flow: column;\r\n`;\r\n\r\nfunction Randomizer({ setColors }) {\r\n\tconst [baseColor, setBaseColor] = useState(null);\r\n\tconst randomize = newColors => setColors(newColors);\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<RandomizerBaseColorSelect color={baseColor} setColor={setBaseColor} />\r\n\t\t\t<ButtonContainer>\r\n\t\t\t\t<Button onClick={() => randomize(generators.generateMonochromatic(baseColor))} theme=\"primary\">\r\n\t\t\t\t\tMonochromatic\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={() => randomize(generators.generateAnalagous(baseColor))} theme=\"primary\">\r\n\t\t\t\t\tAnalagous\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={() => randomize(generators.generateComplementary(baseColor))} theme=\"primary\">\r\n\t\t\t\t\tComplementary\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={() => randomize(generators.generateSplitComplementary(baseColor))} theme=\"primary\">\r\n\t\t\t\t\tSplit Complementary\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button onClick={() => randomize(generators.generateTetradic(baseColor))} theme=\"primary\">\r\n\t\t\t\t\tTetradic\r\n\t\t\t\t</Button>\r\n\t\t\t</ButtonContainer>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default Randomizer;\r\n","import React, { useState, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport ColorSelection from './ColorSelection';\r\nimport GeneratorContext from './GeneratorContext';\r\nimport GeneratedColorView from './GeneratedColorView';\r\n// import ColorThemeDemo from './ColorThemeDemo';\r\nimport TintsAndShadesVisualizer from './TintsAndShadesVisualizer';\r\nimport Randomizer from './Randomizer';\r\nimport SliderGroup from './SliderGroup';\r\n\r\nimport { Color } from '../../classes/Color';\r\nimport { generateAnalagous } from '../../utils/generators';\r\nimport { hexToRGB, combineRGB, generateHue } from '../../utils/utils';\r\n\r\nconst ColorThemeGeneratorDiv = styled.div`\r\n\theight: 100%;\r\n\r\n\tbox-sizing: border-box;\r\n\tbackground-color: #333333;\r\n\tcolor: #ffffff;\r\n\r\n\ta:link {\r\n\t\tcolor: #00dddd;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\ta:visited {\r\n\t\tcolor: #00dddd;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\ta:hover {\r\n\t\tcolor: #eeffff;\r\n\t}\r\n\r\n\toverflow: auto;\r\n`;\r\n\r\nconst ColorThemeGeneratorHeaderDiv = styled.div`\r\n\tfont-size: 80px;\r\n\tfont-weight: 300;\r\n\ttext-align: center;\r\n`;\r\n\r\nconst MainLayoutDiv = styled.div``;\r\n\r\nconst HeaderDiv = styled.div`\r\n\tbackground-color: #161616;\r\n\tpadding: 0px var(--spacing-large);\r\n\theight: 60px;\r\n\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-large);\r\n\tgrid-template-columns: 1fr auto;\r\n\talign-items: center;\r\n`;\r\n\r\nconst ContainerInnerDiv = styled.div`\r\n\tpadding: var(--spacing-medium) var(--spacing-large);\r\n\r\n\tmax-width: 1500px;\r\n\tmargin: auto;\r\n\r\n\tdisplay: grid;\r\n\talign-content: start;\r\n\tgrid-gap: var(--spacing-large);\r\n`;\r\n\r\nconst ControlDiv = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr 1fr 1fr;\r\n\tgrid-gap: 20px;\r\n`;\r\n\r\nconst ColorViewDiv = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: ${props => `repeat(${props.colors.length}, 1fr)`};\r\n`;\r\n\r\nconst GeneratedColors = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n`;\r\n\r\nconst ColorProfileLayout = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-gap: var(--spacing-medium);\r\n\tgrid-auto-flow: column;\r\n\tjustify-content: start;\r\n`;\r\n\r\nconst ColorProfile = styled.div`\r\n\t/* width: 80px; */\r\n\theight: 40px;\r\n\r\n\tbackground-color: black;\r\n\tborder: 2px solid black;\r\n\r\n\tdisplay: grid;\r\n\tgrid-auto-flow: column;\r\n\tgrid-auto-columns: 40px;\r\n\tgrid-gap: 2px;\r\n\r\n\ttransition: 100ms;\r\n\r\n\t&:hover {\r\n\t\tbackground-color: white;\r\n\t\tborder: 2px solid white;\r\n\t\tcursor: pointer;\r\n\t}\r\n`;\r\n\r\nconst initialColors = generateAnalagous();\r\n\r\nfunction ColorThemeGenerator() {\r\n\tconst [colors, setColors] = useState(initialColors);\r\n\tconst [picker, setPicker] = useState(null);\r\n\r\n\tconst [lightVariant, setLightVariant] = useState(25);\r\n\tconst [lighterVariant, setLighterVariant] = useState(75);\r\n\tconst [darkVariant, setDarkVariant] = useState(25);\r\n\tconst [darkerVariant, setDarkerVariant] = useState(75);\r\n\r\n\tconst [neutralTint, setNeutralTint] = useState(6);\r\n\r\n\tconst savedProfilesJSON = localStorage.getItem('saved');\r\n\tconst savedProfiles = savedProfilesJSON ? JSON.parse(savedProfilesJSON) : [];\r\n\r\n\tconst [, updateState] = React.useState();\r\n\tconst forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n\tconst handleContainerClick = () => setPicker(null);\r\n\r\n\tconst handleSave = () => {\r\n\t\tconst savedJSON = localStorage.getItem('saved');\r\n\t\tconst saved = savedJSON ? JSON.parse(savedJSON) : [];\r\n\r\n\t\tconst hexes = colors.map(c => c.hex);\r\n\r\n\t\tsaved.push(hexes);\r\n\r\n\t\tlocalStorage.setItem('saved', JSON.stringify(saved));\r\n\t\tforceUpdate();\r\n\t};\r\n\r\n\tconst handleRestore = hexColors => {\r\n\t\tconst newColors = hexColors.map(hex => new Color(hex));\r\n\t\tsetColors(newColors);\r\n\t};\r\n\r\n\tconst onColorChange = (index, color) => {\r\n\t\tconst newColors = [...colors];\r\n\t\tnewColors[index].setColor(color);\r\n\t\tsetColors(newColors);\r\n\t};\r\n\r\n\tconst rgb = colors\r\n\t\t.map(c => c.rgb)\r\n\t\t.reduce(\r\n\t\t\t(acc, curr) => {\r\n\t\t\t\tacc.r += curr.r;\r\n\t\t\t\tacc.g += curr.g;\r\n\t\t\t\tacc.b += curr.b;\r\n\t\t\t\treturn acc;\r\n\t\t\t},\r\n\t\t\t{ r: 0, g: 0, b: 0 }\r\n\t\t);\r\n\r\n\tconst isWarm = rgb.r > rgb.b;\r\n\tconst ratio = rgb.r === rgb.b ? 0.5 : rgb.r === 0 || rgb.b === 0 ? 1 : 1 - (isWarm ? rgb.b / rgb.r : rgb.r / rgb.b);\r\n\r\n\tconst maxRGB = Math.max(rgb.r, rgb.g, rgb.b) / 255;\r\n\tconst scaledRGB = {};\r\n\tscaledRGB.r = Math.round(rgb.r / maxRGB);\r\n\tscaledRGB.g = Math.round(rgb.g / maxRGB);\r\n\tscaledRGB.b = Math.round(rgb.b / maxRGB);\r\n\r\n\tconst neutrals = [\r\n\t\tcombineRGB(hexToRGB('#111111'), scaledRGB, neutralTint / 100),\r\n\t\tcombineRGB(hexToRGB('#333333'), scaledRGB, neutralTint / 100),\r\n\t\tcombineRGB(hexToRGB('#666666'), scaledRGB, neutralTint / 100),\r\n\t\tcombineRGB(hexToRGB('#aaaaaa'), scaledRGB, neutralTint / 100),\r\n\t\tcombineRGB(hexToRGB('#dddddd'), scaledRGB, neutralTint / 100),\r\n\t\tcombineRGB(hexToRGB('#ffffff'), scaledRGB, neutralTint / 100)\r\n\t];\r\n\r\n\tconst colorsCalculated = colors.map(c => ({\r\n\t\tcolor: c,\r\n\t\tlight: generateHue(c, lightVariant),\r\n\t\tlighter: generateHue(c, lighterVariant),\r\n\t\tdark: generateHue(c, -darkVariant),\r\n\t\tdarker: generateHue(c, -darkerVariant)\r\n\t}));\r\n\r\n\tconst contextValue = {\r\n\t\tcolors,\r\n\t\tcolorsCalculated,\r\n\t\tneutrals,\r\n\t\tonColorChange,\r\n\t\tpicker,\r\n\t\tsetPicker,\r\n\t\tlightVariant,\r\n\t\tlighterVariant,\r\n\t\tdarkVariant,\r\n\t\tdarkerVariant\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GeneratorContext.Provider value={contextValue}>\r\n\t\t\t<ColorThemeGeneratorDiv onClick={handleContainerClick}>\r\n\t\t\t\t<MainLayoutDiv>\r\n\t\t\t\t\t<HeaderDiv>\r\n\t\t\t\t\t\t<ColorProfileLayout>\r\n\t\t\t\t\t\t\t{savedProfiles.map((profile, profileIndex) => (\r\n\t\t\t\t\t\t\t\t<ColorProfile key={profileIndex} onClick={() => handleRestore(profile)}>\r\n\t\t\t\t\t\t\t\t\t{profile.map((c, cIndex) => (\r\n\t\t\t\t\t\t\t\t\t\t<div key={cIndex} style={{ backgroundColor: c }} />\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</ColorProfile>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ColorProfileLayout>\r\n\r\n\t\t\t\t\t\t<div onClick={handleSave}>SAVE</div>\r\n\t\t\t\t\t</HeaderDiv>\r\n\t\t\t\t\t<ContainerInnerDiv>\r\n\t\t\t\t\t\t<ColorThemeGeneratorHeaderDiv>Color Theme Generator</ColorThemeGeneratorHeaderDiv>\r\n\r\n\t\t\t\t\t\t<Randomizer setColors={setColors} />\r\n\r\n\t\t\t\t\t\t<ColorViewDiv colors={colors}>\r\n\t\t\t\t\t\t\t{colors.map((color, i) => (\r\n\t\t\t\t\t\t\t\t<ColorSelection key={i} index={i} />\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ColorViewDiv>\r\n\r\n\t\t\t\t\t\t<ControlDiv>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{isWarm ? 'Warm' : 'Cool'} {ratio.toFixed(2)}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\t\t\tid=\"lightVariant\"\r\n\t\t\t\t\t\t\t\tlabel=\"Light Variant\"\r\n\t\t\t\t\t\t\t\textra={`${lightVariant}%`}\r\n\t\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\t\tvalue={lightVariant}\r\n\t\t\t\t\t\t\t\tonChange={e => setLightVariant(e.target.value)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackground: 'linear-gradient(to right, black, white)'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\t\t\tid=\"darkVariant\"\r\n\t\t\t\t\t\t\t\tlabel=\"Dark Variant\"\r\n\t\t\t\t\t\t\t\textra={`${darkVariant}%`}\r\n\t\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\t\tvalue={darkVariant}\r\n\t\t\t\t\t\t\t\tonChange={e => setDarkVariant(e.target.value)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackground: 'linear-gradient(to right, black, white)'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\t\t\tid=\"neutralTint\"\r\n\t\t\t\t\t\t\t\tlabel=\"Neutral Tint\"\r\n\t\t\t\t\t\t\t\textra={`${neutralTint}%`}\r\n\t\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\t\tvalue={neutralTint}\r\n\t\t\t\t\t\t\t\tonChange={e => setNeutralTint(e.target.value)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackground: 'linear-gradient(to right, black, white)'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\t\t\tid=\"lighterVariant\"\r\n\t\t\t\t\t\t\t\tlabel=\"Lighter Variant\"\r\n\t\t\t\t\t\t\t\textra={`${lighterVariant}%`}\r\n\t\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\t\tvalue={lighterVariant}\r\n\t\t\t\t\t\t\t\tonChange={e => setLighterVariant(e.target.value)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackground: 'linear-gradient(to right, black, white)'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<SliderGroup\r\n\t\t\t\t\t\t\t\tid=\"darkerVariant\"\r\n\t\t\t\t\t\t\t\tlabel=\"Darker Variant\"\r\n\t\t\t\t\t\t\t\textra={`${darkerVariant}%`}\r\n\t\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\t\tvalue={darkerVariant}\r\n\t\t\t\t\t\t\t\tonChange={e => setDarkerVariant(e.target.value)}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tbackground: 'linear-gradient(to right, black, white)'\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</ControlDiv>\r\n\r\n\t\t\t\t\t\t<GeneratedColors style={{ gridTemplateColumns: `repeat(${neutrals.length}, 1fr)` }}>\r\n\t\t\t\t\t\t\t<GeneratedColorView color={neutrals[0]} />\r\n\t\t\t\t\t\t\t<GeneratedColorView color={neutrals[1]} />\r\n\t\t\t\t\t\t\t<GeneratedColorView color={neutrals[2]} />\r\n\t\t\t\t\t\t\t<GeneratedColorView color={neutrals[3]} />\r\n\t\t\t\t\t\t\t<GeneratedColorView color={neutrals[4]} />\r\n\t\t\t\t\t\t\t<GeneratedColorView color={neutrals[5]} />\r\n\t\t\t\t\t\t</GeneratedColors>\r\n\r\n\t\t\t\t\t\t<TintsAndShadesVisualizer />\r\n\r\n\t\t\t\t\t\t<div style={{ marginTop: 100 }}>\r\n\t\t\t\t\t\t\tFor Inspiration:{' '}\r\n\t\t\t\t\t\t\t<a href=\"http://colrd.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n\t\t\t\t\t\t\t\tCOLRD\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div style={{ height: 200 }} />\r\n\r\n\t\t\t\t\t\t{/* <ColorThemeDemo /> */}\r\n\t\t\t\t\t</ContainerInnerDiv>\r\n\t\t\t\t</MainLayoutDiv>\r\n\t\t\t</ColorThemeGeneratorDiv>\r\n\t\t</GeneratorContext.Provider>\r\n\t);\r\n}\r\n\r\nexport default ColorThemeGenerator;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport color from \"color\";\r\n\r\nconst ColorGeneratorRow = ({\r\n  colors,\r\n  level,\r\n  index,\r\n  editingIndex,\r\n  setEditingIndex,\r\n  showConnector = false\r\n}) => {\r\n  return (\r\n    <ElContainer>\r\n      <ElColors>\r\n        {colors.map((c, colorIndex) => (\r\n          <ElColor\r\n            key={colorIndex}\r\n            style={{\r\n              backgroundColor: c,\r\n              color: color(c).isLight() ? \"black\" : \"white\"\r\n            }}\r\n          >\r\n            {colorIndex === level - 1 && \"╳\"}\r\n          </ElColor>\r\n        ))}\r\n        {showConnector && <ElConnector />}\r\n      </ElColors>\r\n      {typeof index === \"number\" && (\r\n        <ElColorSelect\r\n          onClick={() => setEditingIndex(index === editingIndex ? -1 : index)}\r\n        >\r\n          <ElColor style={{ backgroundColor: colors[level - 1] }} />\r\n        </ElColorSelect>\r\n      )}\r\n    </ElContainer>\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-template-columns: auto auto auto 1fr;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ElColors = styled.div`\r\n  position: relative;\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  justify-content: start;\r\n  justify-self: start;\r\n  border: 1px solid var(--color-neutral-500);\r\n`;\r\n\r\nconst ElColor = styled.div`\r\n  height: 75px;\r\n  width: 75px;\r\n\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n`;\r\n\r\nconst ElColorSelect = styled.div`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  justify-content: start;\r\n  justify-self: start;\r\n  border: 1px solid var(--color-neutral-500);\r\n`;\r\n\r\nconst ElConnector = styled.div`\r\n  content: \"\";\r\n  display: block;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: -31px;\r\n  transform: translateX(-50%);\r\n  height: 30px;\r\n  /* width: calc(100% - 75px); */\r\n  width: 15px;\r\n  background-color: var(--color-neutral-600);\r\n`;\r\n\r\nexport default ColorGeneratorRow;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { clamp } from \"../utils/utils\";\r\n\r\nconst MarkerContainer = ({\r\n  position,\r\n  setPosition,\r\n  width = 100,\r\n  height = 100,\r\n  style,\r\n  ...rest\r\n}) => {\r\n  const colorPickerRef = useRef();\r\n  const mouseDownRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const mouseUpListener = () => (mouseDownRef.current = false);\r\n    const mouseMoveListener = e => {\r\n      if (mouseDownRef.current) {\r\n        setPosition([\r\n          clamp(\r\n            e.clientX - colorPickerRef.current.getBoundingClientRect().left,\r\n            0,\r\n            width\r\n          ),\r\n          clamp(\r\n            e.clientY - colorPickerRef.current.getBoundingClientRect().top,\r\n            0,\r\n            height\r\n          )\r\n        ]);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mouseup\", mouseUpListener);\r\n    document.addEventListener(\"mousemove\", mouseMoveListener);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mouseup\", mouseUpListener);\r\n      document.removeEventListener(\"mousemove\", mouseMoveListener);\r\n    };\r\n  }, [width, height, setPosition]);\r\n\r\n  const handleColorSelect = e => {\r\n    if (mouseDownRef.current) {\r\n      setPosition([\r\n        e.clientX - e.target.getBoundingClientRect().left,\r\n        e.clientY - e.target.getBoundingClientRect().top\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ElContainer\r\n      {...rest}\r\n      ref={colorPickerRef}\r\n      onMouseDown={e => {\r\n        mouseDownRef.current = true;\r\n        handleColorSelect(e);\r\n      }}\r\n      style={{\r\n        ...style,\r\n        width,\r\n        height\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport default MarkerContainer;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport color from \"color\";\r\nimport MarkerContainer from \"./MarkerContainer\";\r\nimport { lerp } from \"../utils/utils\";\r\n\r\nconst ColorPicker = ({\r\n  color: defaultColor = \"#ff0000\",\r\n  setColor,\r\n  scheme,\r\n  setScheme\r\n}) => {\r\n  const {\r\n    defaultHuePosition,\r\n    defaultHue,\r\n    defaultMarkerPosition\r\n  } = useMemo(() => {\r\n    const defaultHuePosition = (color(defaultColor).hue() / 360) * 400;\r\n    const defaultHue = color(\"#ff0000\")\r\n      .rotate((defaultHuePosition / 400) * 360)\r\n      .hex();\r\n    console.log({ defaultHue, defaultHuePosition });\r\n\r\n    // const xxx = color(defaultHue)\r\n    //   .rgb()\r\n    //   .array();\r\n    // const yyy = color(defaultColor)\r\n    //   .rgb()\r\n    //   .array();\r\n    // const sr = 1 - (xxx[0] === 0 ? 1 : yyy[0] / xxx[0]);\r\n    // const sg = 1 - (xxx[1] === 0 ? 1 : yyy[1] / xxx[1]);\r\n    // const sb = 1 - (xxx[2] === 0 ? 1 : yyy[2] / xxx[2]);\r\n    // const sats = [sr, sg, sb].filter(x => x !== 0);\r\n    // const defaultSaturation = Math.abs(\r\n    //   (sats.reduce((a, b) => a + b, 0) / sats.length) * 400\r\n    // );\r\n\r\n    // 1 Saturate Base Color\r\n    const hueRGB = color(defaultHue)\r\n      .rgb()\r\n      .array();\r\n    const base = color(defaultColor)\r\n      .rgb()\r\n      .array();\r\n    const max = Math.max(...base);\r\n    const y = 400 - (max / 255) * 400;\r\n    const baseSaturated = base.map(x => (x * 255) / max);\r\n\r\n    const toWhite =\r\n      baseSaturated[0] !== 255\r\n        ? (baseSaturated[0] - hueRGB[0]) / (255 - hueRGB[0])\r\n        : baseSaturated[1] !== 255\r\n        ? (baseSaturated[1] - hueRGB[1]) / (255 - hueRGB[1])\r\n        : (baseSaturated[2] - hueRGB[2]) / (255 - hueRGB[2]);\r\n\r\n    const x = 400 - toWhite * 400;\r\n\r\n    return {\r\n      defaultHuePosition,\r\n      defaultHue,\r\n      defaultMarkerPosition: [x, y]\r\n    };\r\n  }, []);\r\n\r\n  const [pickerColor, setPickerColor] = useState(defaultHue);\r\n  const [markerPosition, setMarkerPosition] = useState(defaultMarkerPosition);\r\n  const [huePosition, setHuePosition] = useState([0, defaultHuePosition]);\r\n  const x = markerPosition[0] / 400;\r\n  const y = markerPosition[1] / 400;\r\n\r\n  const hue = color(\"#ff0000\")\r\n    .rotate((huePosition[1] / 400) * 360)\r\n    .hex();\r\n\r\n  const rgb = color(pickerColor)\r\n    .rgb()\r\n    .array();\r\n  const r = lerp(lerp(255, rgb[0], x), 0, y);\r\n  const g = lerp(lerp(255, rgb[1], x), 0, y);\r\n  const b = lerp(lerp(255, rgb[2], x), 0, y);\r\n  const selectedColor = color([r, g, b]).hex();\r\n\r\n  useEffect(() => setPickerColor(hue), [hue, setPickerColor]);\r\n\r\n  useEffect(() => {\r\n    if (defaultColor !== selectedColor) {\r\n      const timeout = setTimeout(() => setColor(selectedColor), 100);\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [defaultColor, selectedColor, setColor]);\r\n\r\n  return (\r\n    <ElColorPickerContainer>\r\n      <MarkerContainer\r\n        position={markerPosition}\r\n        setPosition={setMarkerPosition}\r\n        width={400}\r\n        height={400}\r\n        style={{\r\n          backgroundColor: color(pickerColor)\r\n        }}\r\n      >\r\n        <ElColorPickerBackground\r\n          style={{\r\n            background: `linear-gradient(to left, transparent, white)`\r\n          }}\r\n        />\r\n        <ElColorPickerBackground\r\n          style={{\r\n            background: \"linear-gradient(to top, black, transparent)\"\r\n          }}\r\n        />\r\n        <ElColorPickerMarker\r\n          style={{\r\n            left: `${markerPosition[0] / 4}%`,\r\n            top: `${markerPosition[1] / 4}%`,\r\n            backgroundColor: selectedColor\r\n          }}\r\n        />\r\n      </MarkerContainer>\r\n      <MarkerContainer\r\n        position={huePosition}\r\n        setPosition={setHuePosition}\r\n        width={60}\r\n        height={400}\r\n        style={{\r\n          background:\r\n            \"linear-gradient(to bottom, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000)\"\r\n        }}\r\n      >\r\n        <ElColorPickerHueMarker style={{ top: `${huePosition[1] / 4}%` }} />\r\n      </MarkerContainer>\r\n      <ElColorSchemeOptions>\r\n        {[\r\n          { label: \"None\", value: null },\r\n          { label: \"Analogous\", value: \"analogous\" },\r\n          { label: \"Complementary\", value: \"complementary\" },\r\n          { label: \"Split Complementary\", value: \"split-complementary\" },\r\n          { label: \"Triadic\", value: \"triadic\" },\r\n          { label: \"Tetradic\", value: \"tetradic\" }\r\n        ].map((o, index) => (\r\n          <ElColorSchemeOption\r\n            key={index}\r\n            active={scheme === o.value}\r\n            onClick={() => setScheme(o.value)}\r\n          >\r\n            {o.label}\r\n          </ElColorSchemeOption>\r\n        ))}\r\n      </ElColorSchemeOptions>\r\n    </ElColorPickerContainer>\r\n  );\r\n};\r\n\r\nconst ElColorPickerContainer = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-template-columns: auto auto auto 1fr;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst ElColorPickerBackground = styled.div`\r\n  position: absolute;\r\n  top: 0%;\r\n  left: 0%;\r\n  bottom: 0%;\r\n  right: 0%;\r\n\r\n  pointer-events: none;\r\n`;\r\n\r\nconst ElColorPickerMarker = styled.div`\r\n  position: absolute;\r\n  height: 16px;\r\n  width: 16px;\r\n  transform: translateX(-50%) translateY(-50%);\r\n  border: 2px solid white;\r\n  background-color: transparent;\r\n  border-radius: 10px;\r\n\r\n  pointer-events: none;\r\n`;\r\n\r\nconst ElColorPickerHueMarker = styled.div`\r\n  position: absolute;\r\n  width: calc(100% + 10px);\r\n  height: 2px;\r\n  transform: translateX(-5px) translateY(-1px);\r\n  background-color: white;\r\n`;\r\n\r\nconst ElColorSchemeOptions = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n`;\r\n\r\nconst ElColorSchemeOption = styled.div`\r\n  height: 30px;\r\n  padding: 0px 15px;\r\n  background-color: var(--color-neutral-400);\r\n  border: 1px solid var(--color-neutral-500);\r\n\r\n  color: var(--color-neutral-500);\r\n\r\n  display: grid;\r\n  justify-items: center;\r\n  align-items: center;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: var(--color-neutral-500);\r\n    background-color: var(--color-neutral-600);\r\n    color: white;\r\n  }\r\n\r\n  ${props =>\r\n    props.active &&\r\n    css`\r\n      background-color: var(--color-neutral-500);\r\n      background-color: var(--color-neutral-600);\r\n      color: white;\r\n    `}\r\n`;\r\n\r\nexport default ColorPicker;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport color from \"color\";\r\nimport ColorGeneratorRow from \"./ColorGeneratorRow\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nconst NewColorGen = () => {\r\n  const [editingIndex, setEditingIndex] = useState(-1);\r\n  const [baseColors, setBaseColors] = useState([\r\n    { color: \"#12db7d\", scheme: null },\r\n    { color: \"#FF4499\", scheme: \"analogous\" }\r\n  ]);\r\n  const generatedColors = baseColors.map(c => generateColors(c.color));\r\n  const generatedColorSchemes = baseColors\r\n    .map(baseColor =>\r\n      baseColor.scheme === \"analogous\"\r\n        ? [\r\n            color(baseColor.color).rotate(-30),\r\n            color(baseColor.color).rotate(30)\r\n          ]\r\n        : baseColor.scheme === \"complementary\"\r\n        ? [color(baseColor.color).rotate(180)]\r\n        : baseColor.scheme === \"split-complementary\"\r\n        ? [\r\n            color(baseColor.color).rotate(150),\r\n            color(baseColor.color).rotate(210)\r\n          ]\r\n        : baseColor.scheme === \"triadic\"\r\n        ? [\r\n            color(baseColor.color).rotate(-120),\r\n            color(baseColor.color).rotate(120)\r\n          ]\r\n        : baseColor.scheme === \"tetradic\"\r\n        ? [\r\n            color(baseColor.color).rotate(-180),\r\n            color(baseColor.color).rotate(-90),\r\n            color(baseColor.color).rotate(90)\r\n          ]\r\n        : []\r\n    )\r\n    .map(colors => colors.map(c => generateColors(c.hex())));\r\n\r\n  console.log(\"NEW COLOR GEN\", baseColors);\r\n\r\n  return (\r\n    <ElContainer>\r\n      <ElColorsContainer>\r\n        <ElColors>\r\n          {baseColors.map((baseColor, colorIndex) => {\r\n            const { colors, level } = generatedColors[colorIndex];\r\n            const additionalRows = generatedColorSchemes[colorIndex];\r\n\r\n            return (\r\n              <ElColorRowGroup key={colorIndex}>\r\n                <ColorGeneratorRow\r\n                  colors={colors}\r\n                  level={level}\r\n                  index={colorIndex}\r\n                  editingIndex={editingIndex}\r\n                  setEditingIndex={setEditingIndex}\r\n                />\r\n                {additionalRows.map(({ colors, level }, rowIndex) => (\r\n                  <ColorGeneratorRow\r\n                    key={rowIndex}\r\n                    colors={colors}\r\n                    level={level}\r\n                    showConnector\r\n                  />\r\n                ))}\r\n              </ElColorRowGroup>\r\n            );\r\n          })}\r\n        </ElColors>\r\n        <ElColorPickerContainer>\r\n          {editingIndex !== -1 && (\r\n            <ColorPicker\r\n              key={editingIndex}\r\n              color={baseColors[editingIndex].color}\r\n              setColor={hex => {\r\n                const newBaseColors = [...baseColors];\r\n                newBaseColors[editingIndex].color = hex;\r\n                setBaseColors(newBaseColors);\r\n              }}\r\n              scheme={baseColors[editingIndex].scheme}\r\n              setScheme={scheme => {\r\n                baseColors[editingIndex].scheme = scheme;\r\n                setBaseColors([...baseColors]);\r\n              }}\r\n            />\r\n          )}\r\n        </ElColorPickerContainer>\r\n      </ElColorsContainer>\r\n      <div>\r\n        <div className=\"medium-header\">Export</div>\r\n        <ElExportContainer>\r\n          {baseColors\r\n            .reduce((acc, curr, index) => {\r\n              acc.push(generatedColors[index]);\r\n              console.log(generatedColorSchemes, generatedColorSchemes[index]);\r\n              acc.push(...generatedColorSchemes[index]);\r\n\r\n              return acc;\r\n            }, [])\r\n            .map(({ colors }, index) =>\r\n              colors\r\n                .map(\r\n                  (c, colorIndex) =>\r\n                    `--color-${index + 1}-${colorIndex * 100 + 100}: ${c};`\r\n                )\r\n                .join(\"\\n\")\r\n            )\r\n            .join(\"\\n\\n\")}\r\n        </ElExportContainer>\r\n      </div>\r\n    </ElContainer>\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  padding: 30px;\r\n\r\n  display: grid;\r\n  grid-gap: 30px;\r\n`;\r\n\r\nconst ElColorsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  min-height: 400px;\r\n`;\r\n\r\nconst ElColors = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-content: start;\r\n`;\r\n\r\nconst ElColorRowGroup = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-items: center;\r\n`;\r\n\r\nconst ElColorPickerContainer = styled.div``;\r\n\r\nconst ElExportContainer = styled.div`\r\n  background-color: #484848;\r\n  font-family: \"Roboto Mono\";\r\n  padding: 30px;\r\n  line-height: 25px;\r\n  white-space: pre;\r\n\r\n  color: white;\r\n`;\r\n\r\n// const generateColors = baseColor => {\r\n//   const colors = [baseColor];\r\n\r\n//   while (colors.length < 9) {\r\n//     const lastColor = colors[colors.length - 1];\r\n//     const luminosity = color(lastColor).luminosity();\r\n//     const proximityTo50 = (50 - Math.abs(50 - luminosity * 100)) / 50;\r\n//     const scalingFactor = Math.pow(proximityTo50, 2);\r\n//     console.log({ luminosity, scalingFactor });\r\n//     const increment = 0.15;\r\n//     const nextColor = color(lastColor).lighten(scalingFactor * increment);\r\n\r\n//     colors.push(nextColor.hex());\r\n//   }\r\n\r\n//   return colors;\r\n// };\r\n\r\n// const generateColors = baseColor => {\r\n//   const c = color(baseColor);\r\n//   console.log(\"luminosity\", c.luminosity());\r\n//   console.log(\"lightness\", c.lightness());\r\n//   console.log(\"hex\", c.hex());\r\n\r\n//   const standardRange = [5, 10, 20, 30, 40, 50, 60, 70, 80, 85, 90, 93, 96];\r\n\r\n//   const luminosity = c.lightness();\r\n//   const ROOT = 1.25;\r\n//   const luminositySqrt = Math.pow(luminosity, 1 / ROOT);\r\n//   const luminositySqrtStr = luminositySqrt.toString();\r\n//   const level = Number(luminositySqrtStr[2]);\r\n//   const values = standardRange.map(x => x / 100);\r\n\r\n//   const colorRange = [c.hex()];\r\n//   let darker = color(c);\r\n//   let darkerLimit = 0;\r\n//   while (darker.luminosity() > 0.0 && darkerLimit < 100) {\r\n//     darkerLimit++;\r\n//     darker = darker.darken(0.04);\r\n//     colorRange.unshift(darker.hex());\r\n//   }\r\n//   let lighter = color(c);\r\n//   let lighterLimit = 0;\r\n//   while (lighter.luminosity() < 0.99 && lighterLimit < 100) {\r\n//     lighterLimit++;\r\n//     lighter = lighter.lighten(0.04);\r\n//     colorRange.push(lighter.hex());\r\n//   }\r\n\r\n//   console.log(\r\n//     \"lightness\",\r\n//     colorRange.map(c => color(c).luminosity())\r\n//   );\r\n\r\n//   const closest = standardRange.reduce((prev, curr) =>\r\n//     Math.abs(curr - luminosity * 100) < Math.abs(prev - luminosity * 100)\r\n//       ? curr\r\n//       : prev\r\n//   );\r\n//   const closestIndex = standardRange.indexOf(closest);\r\n//   const offset = luminosity * 100 - closest;\r\n//   const farthestDistance = Math.min(closestIndex, 9 - closestIndex);\r\n\r\n//   const range = values.map(x => Math.pow(x, ROOT));\r\n//   console.log(range);\r\n//   const colors = range.map((lightness, index) => {\r\n//     return colorRange.reduce((prev, curr) =>\r\n//       Math.abs(color(curr).lightness() - lightness) <\r\n//       Math.abs(color(prev).lightness() - lightness)\r\n//         ? curr\r\n//         : prev\r\n//     );\r\n//   });\r\n\r\n//   // return colors;\r\n\r\n//   return colorRange;\r\n// };\r\n\r\nconst generateColors = baseColor => {\r\n  const c = color(baseColor);\r\n\r\n  const luminosity = c.luminosity();\r\n  const ROOT = 1.5;\r\n  const luminositySqrt = Math.pow(luminosity, 1 / ROOT);\r\n  const luminositySqrtStr = luminositySqrt.toString();\r\n  const level = Number(luminositySqrtStr[2]);\r\n\r\n  const values = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(x =>\r\n    Number(`0.${x}${luminositySqrtStr.slice(3)}`)\r\n  );\r\n\r\n  const colorRange = [c.hex()];\r\n  let darker = color(c);\r\n  let darkerLimit = 0;\r\n  while (darker.luminosity() > 0.01 && darkerLimit < 100) {\r\n    darkerLimit++;\r\n    darker = darker.darken(0.02);\r\n    colorRange.unshift(darker.hex());\r\n  }\r\n  let lighter = color(c);\r\n  let lighterLimit = 0;\r\n  while (lighter.luminosity() < 0.99 && lighterLimit < 100) {\r\n    lighterLimit++;\r\n    lighter = lighter.lighten(0.02);\r\n    colorRange.push(lighter.hex());\r\n  }\r\n\r\n  const range = values.map(x => Math.pow(x, ROOT));\r\n  const colors = range.map((luminosity, index) => {\r\n    return colorRange.reduce((prev, curr) =>\r\n      Math.abs(color(curr).luminosity() - luminosity) <\r\n      Math.abs(color(prev).luminosity() - luminosity)\r\n        ? curr\r\n        : prev\r\n    );\r\n  });\r\n\r\n  return { colors, level };\r\n};\r\n\r\nexport default NewColorGen;\r\n","import React from \"react\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport \"normalize.css\";\r\nimport \"./transitions.css\";\r\n\r\nimport HomePage from \"../HomePage/HomePage\";\r\nimport ColorThemeGenerator from \"../ColorThemeGenerator/ColorThemeGenerator\";\r\nimport NewColorGen from \"../NewColorGen\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route path=\"/\" exact component={NewColorGen} />\r\n\r\n      {/* <Route path=\"/\" exact component={HomePage} /> */}\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}