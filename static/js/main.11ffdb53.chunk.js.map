{"version":3,"sources":["components/ColorGeneratorRow.js","utils/utils.js","components/MarkerContainer.js","components/TextInput.js","components/ColorPicker.js","components/TextButton.js","components/NewColorGen.js","components/App/App.jsx","serviceWorker.js","index.js"],"names":["ElContainer","styled","div","ElColors","ElColor","ElColorSelect","ElColorSelectIndicator","ElConnector","ColorGeneratorRow","colors","level","index","editingIndex","setEditingIndex","showConnector","map","c","colorIndex","key","style","backgroundColor","color","isLight","onClick","clamp","value","min","max","Math","round","lerp","a","b","t","Array","i","random","toString","join","MarkerContainer","position","setPosition","width","height","rest","colorPickerRef","useRef","mouseDownRef","useEffect","mouseUpListener","current","mouseMoveListener","e","clientX","getBoundingClientRect","left","clientY","top","document","addEventListener","removeEventListener","ref","onMouseDown","target","handleColorSelect","ElInput","input","TextInput","getParameters","baseColor","size","defaultHuePosition","hue","defaultHue","rotate","hex","hueRGB","rgb","array","base","y","baseSaturated","x","defaultMarkerPosition","ElColorPickerContainer","ElColorPickerTopRow","ElColorPickerBottomRow","ElColorPickerBackground","ElColorPickerMarker","ElColorPickerHueMarker","ElColorSchemeOptions","ElColorSchemeOption","props","active","css","ColorPicker","defaultColor","setColor","scheme","setScheme","useMemo","useState","colorInput","pickerColor","markerPosition","huePosition","s","setS","r","g","selectedColor","timeout","setTimeout","toLowerCase","clearTimeout","p","background","onChange","newColorInput","test","console","log","className","label","o","TextButton","ElColorsContainer","ElColorRowGroup","ElExportContainer","generateColors","luminosity","luminositySqrtStr","pow","Number","values","slice","colorRange","darker","darkerLimit","darken","unshift","lighter","lighterLimit","lighten","push","reduce","prev","curr","abs","NewColorGen","baseColors","setBaseColors","generatedColors","generatedColorSchemes","additionalRows","rowIndex","newBaseColors","acc","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11ffdb53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport color from \"color\";\r\n\r\nconst ColorGeneratorRow = ({\r\n  colors,\r\n  level,\r\n  index,\r\n  editingIndex,\r\n  setEditingIndex,\r\n  showConnector = false\r\n}) => {\r\n  return (\r\n    <ElContainer>\r\n      <ElColors>\r\n        {colors.map((c, colorIndex) => (\r\n          <ElColor\r\n            key={colorIndex}\r\n            style={{\r\n              backgroundColor: c,\r\n              color: color(c).isLight() ? \"black\" : \"white\"\r\n            }}\r\n          >\r\n            {colorIndex === level - 1 && \"╳\"}\r\n          </ElColor>\r\n        ))}\r\n        {showConnector && <ElConnector />}\r\n      </ElColors>\r\n      {typeof index === \"number\" && (\r\n        <ElColorSelect\r\n          onClick={() => setEditingIndex(index === editingIndex ? -1 : index)}\r\n          style={{ backgroundColor: colors[level - 1] }}\r\n        />\r\n      )}\r\n      {typeof index === \"number\" && index === editingIndex && <ElColorSelectIndicator />}\r\n    </ElContainer>\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-template-columns: minmax(0, 675px) minmax(0, 75px) 30px;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ElColors = styled.div`\r\n  position: relative;\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  grid-auto-columns: minmax(0, 1fr);\r\n  border: 1px solid var(--color-neutral-500);\r\n`;\r\n\r\nconst ElColor = styled.div`\r\n  height: 75px;\r\n  min-width: 30px;\r\n\r\n  display: grid;\r\n  align-items: center;\r\n  justify-items: center;\r\n`;\r\n\r\n\r\nconst ElColorSelect = styled.div`\r\n  height: 75px;\r\n  width: 75px;\r\n  border: 1px solid var(--color-neutral-500);\r\n\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  justify-content: start;\r\n  justify-self: start;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ElColorSelectIndicator = styled.div`\r\n  position: relative;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    display: block;\r\n    border-top: 37.5px solid transparent;\r\n    border-left: 15px solid var(--color-neutral-700);\r\n  }\r\n\r\n  &::after {\r\n    content: \"\";\r\n    display: block;\r\n    position: absolute;\r\n    border-bottom: 37.5px solid transparent;\r\n    border-left: 15px solid var(--color-neutral-700);\r\n  }\r\n`\r\nconst ElConnector = styled.div`\r\n  content: \"\";\r\n  display: block;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: -31px;\r\n  transform: translateX(-50%);\r\n  height: 30px;\r\n  /* width: calc(100% - 75px); */\r\n  width: 15px;\r\n  background-color: var(--color-neutral-600);\r\n`;\r\n\r\nexport default ColorGeneratorRow;\r\n","const toPaddedHexString = (num, len) => {\r\n  const str = num.toString(16);\r\n  return \"0\".repeat(len - str.length) + str;\r\n};\r\n\r\nconst numbersToHex = (r, g, b) =>\r\n  `#${toPaddedHexString(r, 2)}${toPaddedHexString(g, 2)}${toPaddedHexString(\r\n    b,\r\n    2\r\n  )}`;\r\n\r\nexport const clamp = (value, min = 0, max = 1) =>\r\n  Math.round(Math.min(Math.max(value, min), max));\r\n\r\nexport const clamp0to255 = value =>\r\n  Math.round(Math.min(Math.max(value, 0), 255));\r\n\r\nexport const lerp = (a, b, t) => a + (b - a) * t;\r\n\r\nexport const RGBToHSL = rgb => {\r\n  // Make r, g, and b fractions of 1\r\n  const r = (rgb.r /= 255);\r\n  const g = (rgb.g /= 255);\r\n  const b = (rgb.b /= 255);\r\n\r\n  // Find greatest and smallest channel values\r\n  let cmin = Math.min(r, g, b);\r\n  let cmax = Math.max(r, g, b);\r\n  let delta = cmax - cmin;\r\n  let h = 0;\r\n  let s = 0;\r\n  let l = 0;\r\n\r\n  // Calculate hue\r\n  // No difference\r\n  if (delta == 0) h = 0;\r\n  // Red is max\r\n  else if (cmax == r) h = ((g - b) / delta) % 6;\r\n  // Green is max\r\n  else if (cmax == g) h = (b - r) / delta + 2;\r\n  // Blue is max\r\n  else h = (r - g) / delta + 4;\r\n\r\n  h = Math.round(h * 60);\r\n\r\n  // Make negative hues positive behind 360°\r\n  if (h < 0) h += 360;\r\n\r\n  // Calculate lightness\r\n  l = (cmax + cmin) / 2;\r\n\r\n  // Calculate saturation\r\n  s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n\r\n  // Multiply l and s by 100\r\n  s = Math.abs(s * 100);\r\n  l = Math.abs(l * 100);\r\n\r\n  return { h, s, l };\r\n};\r\n\r\nexport const HSLToRGB = hsl => {\r\n  // Must be fractions of 1\r\n  const h = hsl.h;\r\n  const s = hsl.s / 100;\r\n  const l = hsl.l / 100;\r\n\r\n  let c = (1 - Math.abs(2 * l - 1)) * s,\r\n    x = c * (1 - Math.abs(((h / 60) % 2) - 1)),\r\n    m = l - c / 2,\r\n    r = 0,\r\n    g = 0,\r\n    b = 0;\r\n\r\n  if (0 <= h && h < 60) {\r\n    r = c;\r\n    g = x;\r\n    b = 0;\r\n  } else if (60 <= h && h < 120) {\r\n    r = x;\r\n    g = c;\r\n    b = 0;\r\n  } else if (120 <= h && h < 180) {\r\n    r = 0;\r\n    g = c;\r\n    b = x;\r\n  } else if (180 <= h && h < 240) {\r\n    r = 0;\r\n    g = x;\r\n    b = c;\r\n  } else if (240 <= h && h < 300) {\r\n    r = x;\r\n    g = 0;\r\n    b = c;\r\n  } else if (300 <= h && h < 360) {\r\n    r = c;\r\n    g = 0;\r\n    b = x;\r\n  }\r\n  r = Math.round((r + m) * 255);\r\n  g = Math.round((g + m) * 255);\r\n  b = Math.round((b + m) * 255);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nexport const HSLToHex = hsl => {\r\n  const rgb = HSLToRGB(hsl);\r\n\r\n  return RGBToHex(rgb);\r\n};\r\n\r\nexport const getTextDark = color => {\r\n  const rgb = hexToRGB(color);\r\n  return rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114 > 186;\r\n};\r\n\r\nexport const hexToRGB = hex => {\r\n  const r = parseInt(hex.slice(1, 3), 16);\r\n  const g = parseInt(hex.slice(3, 5), 16);\r\n  const b = parseInt(hex.slice(5, 7), 16);\r\n\r\n  return { r, g, b };\r\n};\r\n\r\nexport const hexToHSL = hex => {\r\n  const rgb = hexToRGB(hex);\r\n  return RGBToHSL(rgb);\r\n};\r\n\r\nexport const RGBToHex = rgb => numbersToHex(rgb.r, rgb.g, rgb.b);\r\n\r\nexport const generateHue = (color, gain) => {\r\n  const r0 = color.rgb.r;\r\n  const g0 = color.rgb.g;\r\n  const b0 = color.rgb.b;\r\n\r\n  const mult = Math.abs(gain / 100);\r\n  const target = gain > 0 ? 255 : 0;\r\n\r\n  const r = clamp0to255(lerp(r0, target, mult));\r\n  const g = clamp0to255(lerp(g0, target, mult));\r\n  const b = clamp0to255(lerp(b0, target, mult));\r\n\r\n  return RGBToHex({ r, g, b });\r\n};\r\n\r\nexport const combineRGB = (tarhexToRGB, addedRGB, strength) => {\r\n  const totalAdd = addedRGB.r + addedRGB.g + addedRGB.b;\r\n  const averageAdd = clamp0to255((totalAdd / 3) * strength);\r\n  const r = clamp0to255(tarhexToRGB.r + addedRGB.r * strength - averageAdd);\r\n  const g = clamp0to255(tarhexToRGB.g + addedRGB.g * strength - averageAdd);\r\n  const b = clamp0to255(tarhexToRGB.b + addedRGB.b * strength - averageAdd);\r\n\r\n  return numbersToHex(r, g, b);\r\n};\r\n\r\nexport const generateRandomString = [...Array(10)]\r\n  .map(i => (~~(Math.random() * 36)).toString(36))\r\n  .join(\"\");\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { clamp } from \"../utils/utils\";\r\n\r\nconst MarkerContainer = ({\r\n  position,\r\n  setPosition,\r\n  width = 100,\r\n  height = 100,\r\n  style,\r\n  ...rest\r\n}) => {\r\n  const colorPickerRef = useRef();\r\n  const mouseDownRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const mouseUpListener = () => (mouseDownRef.current = false);\r\n    const mouseMoveListener = e => {\r\n      if (mouseDownRef.current) {\r\n        setPosition([\r\n          clamp(\r\n            e.clientX - colorPickerRef.current.getBoundingClientRect().left,\r\n            0,\r\n            width\r\n          ),\r\n          clamp(\r\n            e.clientY - colorPickerRef.current.getBoundingClientRect().top,\r\n            0,\r\n            height\r\n          )\r\n        ]);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mouseup\", mouseUpListener);\r\n    document.addEventListener(\"mousemove\", mouseMoveListener);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mouseup\", mouseUpListener);\r\n      document.removeEventListener(\"mousemove\", mouseMoveListener);\r\n    };\r\n  }, [width, height, setPosition]);\r\n\r\n  const handleColorSelect = e => {\r\n    if (mouseDownRef.current) {\r\n      setPosition([\r\n        e.clientX - e.target.getBoundingClientRect().left,\r\n        e.clientY - e.target.getBoundingClientRect().top\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ElContainer\r\n      {...rest}\r\n      ref={colorPickerRef}\r\n      onMouseDown={e => {\r\n        mouseDownRef.current = true;\r\n        handleColorSelect(e);\r\n      }}\r\n      style={{\r\n        ...style,\r\n        width,\r\n        height\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nexport default MarkerContainer;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\"\r\n\r\nconst TextInput = ({ ...rest }) => {\r\n  return <ElInput {...rest} />\r\n}\r\n\r\nconst ElInput = styled.input`\r\n  border: 1px solid var(--color-neutral-500);\r\n  background-color: var(--color-neutral-300);\r\n  padding: 0px 15px;\r\n  height: 30px;\r\n\r\n  color: white;\r\n  line-height: 28px;\r\n`\r\n\r\nexport default TextInput","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport color from \"color\";\r\nimport MarkerContainer from \"./MarkerContainer\";\r\nimport TextInput from \"./TextInput\"\r\nimport { lerp } from \"../utils/utils\";\r\n\r\nconst ColorPicker = ({\r\n  color: defaultColor = \"#ff0000\",\r\n  setColor,\r\n  scheme,\r\n  setScheme\r\n}) => {\r\n  const size = 400;\r\n  const sizeHue = 60;\r\n\r\n  const {\r\n    defaultHuePosition,\r\n    defaultHue,\r\n    defaultMarkerPosition\r\n  } = useMemo(() => getParameters(defaultColor, size), []);\r\n\r\n  const [s, setS] = useState({\r\n    colorInput: defaultColor,\r\n    pickerColor: defaultHue,\r\n    markerPosition: defaultMarkerPosition,\r\n    huePosition: [0, defaultHuePosition],\r\n  });\r\n\r\n  const {\r\n    colorInput,\r\n    pickerColor,\r\n    markerPosition,\r\n    huePosition,\r\n  } = s\r\n\r\n  const x = markerPosition[0] / size;\r\n  const y = markerPosition[1] / size;\r\n\r\n  const rgb = color(pickerColor)\r\n    .rgb()\r\n    .array();\r\n  const r = lerp(lerp(255, rgb[0], x), 0, y);\r\n  const g = lerp(lerp(255, rgb[1], x), 0, y);\r\n  const b = lerp(lerp(255, rgb[2], x), 0, y);\r\n  const selectedColor = color([r, g, b]).hex();\r\n\r\n  useEffect(() => {\r\n    if (defaultColor !== selectedColor) {\r\n      const timeout = setTimeout(() => {\r\n        setColor(selectedColor);\r\n\r\n        if (selectedColor.toLowerCase() !== colorInput.toLowerCase()) {\r\n          setS(s => ({ ...s, colorInput: selectedColor }));\r\n        }\r\n      }, 100);\r\n\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [defaultColor, selectedColor, setColor, colorInput]);\r\n\r\n  return (\r\n    <ElColorPickerContainer>\r\n      <ElColorPickerTopRow>\r\n        <MarkerContainer\r\n          position={markerPosition}\r\n          setPosition={p => setS({ ...s, markerPosition: p })}\r\n          width={size}\r\n          height={size}\r\n          style={{\r\n            backgroundColor: color(pickerColor)\r\n          }}\r\n        >\r\n          <ElColorPickerBackground\r\n            style={{\r\n              background: `linear-gradient(to left, transparent, white)`\r\n            }}\r\n          />\r\n          <ElColorPickerBackground\r\n            style={{\r\n              background: \"linear-gradient(to top, black, transparent)\"\r\n            }}\r\n          />\r\n          <ElColorPickerMarker\r\n            style={{\r\n              left: `${markerPosition[0] / 4}%`,\r\n              top: `${markerPosition[1] / 4}%`,\r\n              backgroundColor: selectedColor\r\n            }}\r\n          />\r\n        </MarkerContainer>\r\n        <MarkerContainer\r\n          position={huePosition}\r\n          setPosition={p => {\r\n            const hue = color(\"#ff0000\")\r\n              .rotate((p[1] / size) * 360)\r\n              .hex();\r\n            setS({\r\n              ...s,\r\n              huePosition: p,\r\n              pickerColor: hue\r\n            });\r\n          }}\r\n          width={sizeHue}\r\n          height={size}\r\n          style={{\r\n            background:\r\n              \"linear-gradient(to bottom, #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000)\"\r\n          }}\r\n        >\r\n          <ElColorPickerHueMarker style={{ top: `${huePosition[1] / 4}%` }} />\r\n        </MarkerContainer>\r\n      </ElColorPickerTopRow>\r\n      <ElColorPickerBottomRow>\r\n        <div>\r\n          <TextInput value={colorInput} onChange={(e) => {\r\n            const newColorInput = e.target.value;\r\n\r\n            if (/^#[0-9a-f]{6}$/i.test(newColorInput)) {\r\n              const {\r\n                defaultHuePosition,\r\n                defaultHue,\r\n                defaultMarkerPosition\r\n              } = getParameters(newColorInput, size);\r\n\r\n              console.log({\r\n                defaultHuePosition,\r\n                defaultHue,\r\n                defaultMarkerPosition\r\n              });\r\n\r\n              setS({\r\n                colorInput: newColorInput,\r\n                pickerColor: defaultHue,\r\n                huePosition: defaultHuePosition,\r\n                markerPosition: defaultMarkerPosition,\r\n              })\r\n            } else {\r\n              setS({ ...s, colorInput: newColorInput })\r\n            }\r\n          }} />\r\n        </div>\r\n        <div>\r\n          <div className=\"small-header\">\r\n            Color Scheme\r\n          </div>\r\n          <ElColorSchemeOptions>\r\n            {[\r\n              { label: \"None\", value: null },\r\n              { label: \"Analogous\", value: \"analogous\" },\r\n              { label: \"Complementary\", value: \"complementary\" },\r\n              { label: \"Split Complementary\", value: \"split-complementary\" },\r\n              { label: \"Triadic\", value: \"triadic\" },\r\n              { label: \"Tetradic\", value: \"tetradic\" }\r\n            ].map((o, index) => (\r\n              <ElColorSchemeOption\r\n                key={index}\r\n                active={scheme === o.value}\r\n                onClick={() => setScheme(o.value)}\r\n              >\r\n                {o.label}\r\n              </ElColorSchemeOption>\r\n            ))}\r\n          </ElColorSchemeOptions>\r\n        </div>\r\n      </ElColorPickerBottomRow>\r\n    </ElColorPickerContainer>\r\n  );\r\n};\r\n\r\nconst getParameters = (baseColor, size) => {\r\n  const defaultHuePosition = (color(baseColor).hue() / 360) * size;\r\n  const defaultHue = color(\"#ff0000\")\r\n    .rotate((defaultHuePosition / size) * 360)\r\n    .hex();\r\n\r\n  const hueRGB = color(defaultHue)\r\n    .rgb()\r\n    .array();\r\n  const base = color(baseColor)\r\n    .rgb()\r\n    .array();\r\n  const max = Math.max(...base);\r\n  const y = size - (max / 255) * size;\r\n  const baseSaturated = base.map(x => (x * 255) / max);\r\n\r\n  const toWhite =\r\n    baseSaturated[0] !== 255\r\n      ? (baseSaturated[0] - hueRGB[0]) / (255 - hueRGB[0])\r\n      : baseSaturated[1] !== 255\r\n        ? (baseSaturated[1] - hueRGB[1]) / (255 - hueRGB[1])\r\n        : (baseSaturated[2] - hueRGB[2]) / (255 - hueRGB[2]);\r\n\r\n  const x = size - toWhite * size;\r\n\r\n  return {\r\n    defaultHuePosition,\r\n    defaultHue,\r\n    defaultMarkerPosition: [x, y]\r\n  };\r\n}\r\n\r\nconst ElColorPickerContainer = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ElColorPickerTopRow = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-auto-flow: column;\r\n  align-items: flex-start;\r\n  justify-items: flex-start;\r\n`\r\n\r\nconst ElColorPickerBottomRow = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  grid-auto-flow: column;\r\n`\r\n\r\nconst ElColorPickerBackground = styled.div`\r\n  position: absolute;\r\n  top: 0%;\r\n  left: 0%;\r\n  bottom: 0%;\r\n  right: 0%;\r\n\r\n  pointer-events: none;\r\n`;\r\n\r\nconst ElColorPickerMarker = styled.div`\r\n  position: absolute;\r\n  height: 16px;\r\n  width: 16px;\r\n  transform: translateX(-50%) translateY(-50%);\r\n  border: 2px solid white;\r\n  background-color: transparent;\r\n  border-radius: 10px;\r\n\r\n  pointer-events: none;\r\n`;\r\n\r\nconst ElColorPickerHueMarker = styled.div`\r\n  position: absolute;\r\n  width: calc(100% + 10px);\r\n  height: 2px;\r\n  transform: translateX(-5px) translateY(-1px);\r\n  background-color: white;\r\n`;\r\n\r\nconst ElColorSchemeOptions = styled.div`\r\n  display: grid;\r\n  grid-gap: 10px;\r\n`;\r\n\r\nconst ElColorSchemeOption = styled.div`\r\n  height: 30px;\r\n  padding: 0px 15px;\r\n  background-color: var(--color-neutral-400);\r\n  border: 1px solid var(--color-neutral-500);\r\n\r\n  color: var(--color-neutral-500);\r\n\r\n  display: grid;\r\n  justify-items: center;\r\n  align-items: center;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: var(--color-neutral-500);\r\n    background-color: var(--color-neutral-600);\r\n    color: white;\r\n  }\r\n\r\n  ${props =>\r\n    props.active &&\r\n    css`\r\n      background-color: var(--color-neutral-500);\r\n      background-color: var(--color-neutral-600);\r\n      color: white;\r\n    `}\r\n`;\r\n\r\nexport default ColorPicker;\r\n","import styled from \"styled-components\"\r\n\r\nconst TextButton = styled.div`\r\n  display: inline-block;\r\n\r\n  color: white;\r\n\r\n  cursor: pointer;\r\n\r\n  user-select: none;\r\n\r\n  &:hover {\r\n    color: var(--color-primary-800);\r\n  }\r\n`\r\n\r\nexport default TextButton;","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport color from \"color\";\r\nimport ColorGeneratorRow from \"./ColorGeneratorRow\";\r\nimport ColorPicker from \"./ColorPicker\";\r\nimport TextButton from \"./TextButton\"\r\n\r\nconst NewColorGen = () => {\r\n  const [editingIndex, setEditingIndex] = useState(0);\r\n  const [baseColors, setBaseColors] = useState([\r\n    { color: \"#FF2EBD\", scheme: \"analogous\" },\r\n    { color: \"#9C999A\", scheme: null },\r\n  ]);\r\n  const generatedColors = baseColors.map(c => generateColors(c.color));\r\n  const generatedColorSchemes = baseColors\r\n    .map(baseColor =>\r\n      baseColor.scheme === \"analogous\"\r\n        ? [\r\n          color(baseColor.color).rotate(-30),\r\n          color(baseColor.color).rotate(30)\r\n        ]\r\n        : baseColor.scheme === \"complementary\"\r\n          ? [color(baseColor.color).rotate(180)]\r\n          : baseColor.scheme === \"split-complementary\"\r\n            ? [\r\n              color(baseColor.color).rotate(150),\r\n              color(baseColor.color).rotate(210)\r\n            ]\r\n            : baseColor.scheme === \"triadic\"\r\n              ? [\r\n                color(baseColor.color).rotate(-120),\r\n                color(baseColor.color).rotate(120)\r\n              ]\r\n              : baseColor.scheme === \"tetradic\"\r\n                ? [\r\n                  color(baseColor.color).rotate(-180),\r\n                  color(baseColor.color).rotate(-90),\r\n                  color(baseColor.color).rotate(90)\r\n                ]\r\n                : []\r\n    )\r\n    .map(colors => colors.map(c => generateColors(c.hex())));\r\n\r\n  return (\r\n    <ElContainer>\r\n      <h1>Color Theme Generator</h1>\r\n      <ElColorsContainer>\r\n        <ElColors>\r\n          {baseColors.map((baseColor, colorIndex) => {\r\n            const { colors, level } = generatedColors[colorIndex];\r\n            const additionalRows = generatedColorSchemes[colorIndex];\r\n\r\n            return (\r\n              <ElColorRowGroup key={colorIndex}>\r\n                <ColorGeneratorRow\r\n                  colors={colors}\r\n                  level={level}\r\n                  index={colorIndex}\r\n                  editingIndex={editingIndex}\r\n                  setEditingIndex={setEditingIndex}\r\n                />\r\n                {additionalRows.map(({ colors, level }, rowIndex) => (\r\n                  <ColorGeneratorRow\r\n                    key={rowIndex}\r\n                    colors={colors}\r\n                    level={level}\r\n                    showConnector\r\n                  />\r\n                ))}\r\n              </ElColorRowGroup>\r\n            );\r\n          })}\r\n          <div>\r\n            <TextButton onClick={() =>\r\n              setBaseColors([...baseColors, { color: \"#ffffff\", scheme: null }])\r\n            }>\r\n              Add Color\r\n          </TextButton>\r\n          </div>\r\n        </ElColors>\r\n        <ElColorPickerContainer>\r\n          {editingIndex !== -1 && (\r\n            <ColorPicker\r\n              key={editingIndex}\r\n              color={baseColors[editingIndex].color}\r\n              setColor={hex => {\r\n                const newBaseColors = [...baseColors];\r\n                newBaseColors[editingIndex].color = hex;\r\n                setBaseColors(newBaseColors);\r\n              }}\r\n              scheme={baseColors[editingIndex].scheme}\r\n              setScheme={scheme => {\r\n                baseColors[editingIndex].scheme = scheme;\r\n                setBaseColors([...baseColors]);\r\n              }}\r\n            />\r\n          )}\r\n        </ElColorPickerContainer>\r\n      </ElColorsContainer>\r\n      <div>\r\n        <div className=\"medium-header\">Export</div>\r\n        <ElExportContainer>\r\n          {baseColors\r\n            .reduce((acc, curr, index) => {\r\n              acc.push(generatedColors[index]);\r\n              acc.push(...generatedColorSchemes[index]);\r\n\r\n              return acc;\r\n            }, [])\r\n            .map(({ colors }, index) =>\r\n              colors\r\n                .map(\r\n                  (c, colorIndex) =>\r\n                    `--color-${index + 1}-${colorIndex * 100 + 100}: ${c};`\r\n                )\r\n                .join(\"\\n\")\r\n            )\r\n            .join(\"\\n\\n\")}\r\n        </ElExportContainer>\r\n      </div>\r\n    </ElContainer>\r\n  );\r\n};\r\n\r\nconst ElContainer = styled.div`\r\n  padding: 30px;\r\n  max-width: 1600px;\r\n  margin: auto;\r\n\r\n  display: grid;\r\n  grid-gap: 30px;\r\n`;\r\n\r\nconst ElColorsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: minmax(0, 1fr) 490px;\r\n  grid-gap: 30px;\r\n  min-height: 400px;\r\n`;\r\n\r\nconst ElColors = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-content: start;\r\n`;\r\n\r\nconst ElColorRowGroup = styled.div`\r\n  display: grid;\r\n  grid-gap: 30px;\r\n  align-items: center;\r\n`;\r\n\r\nconst ElColorPickerContainer = styled.div``;\r\n\r\nconst ElExportContainer = styled.div`\r\n  background-color: #484848;\r\n  font-family: \"Roboto Mono\";\r\n  padding: 30px;\r\n  line-height: 25px;\r\n  white-space: pre;\r\n\r\n  color: white;\r\n`;\r\n\r\n// const generateColors = baseColor => {\r\n//   const colors = [baseColor];\r\n\r\n//   while (colors.length < 9) {\r\n//     const lastColor = colors[colors.length - 1];\r\n//     const luminosity = color(lastColor).luminosity();\r\n//     const proximityTo50 = (50 - Math.abs(50 - luminosity * 100)) / 50;\r\n//     const scalingFactor = Math.pow(proximityTo50, 2);\r\n//     console.log({ luminosity, scalingFactor });\r\n//     const increment = 0.15;\r\n//     const nextColor = color(lastColor).lighten(scalingFactor * increment);\r\n\r\n//     colors.push(nextColor.hex());\r\n//   }\r\n\r\n//   return colors;\r\n// };\r\n\r\n// const generateColors = baseColor => {\r\n//   const c = color(baseColor);\r\n//   console.log(\"luminosity\", c.luminosity());\r\n//   console.log(\"lightness\", c.lightness());\r\n//   console.log(\"hex\", c.hex());\r\n\r\n//   const standardRange = [5, 10, 20, 30, 40, 50, 60, 70, 80, 85, 90, 93, 96];\r\n\r\n//   const luminosity = c.lightness();\r\n//   const ROOT = 1.25;\r\n//   const luminositySqrt = Math.pow(luminosity, 1 / ROOT);\r\n//   const luminositySqrtStr = luminositySqrt.toString();\r\n//   const level = Number(luminositySqrtStr[2]);\r\n//   const values = standardRange.map(x => x / 100);\r\n\r\n//   const colorRange = [c.hex()];\r\n//   let darker = color(c);\r\n//   let darkerLimit = 0;\r\n//   while (darker.luminosity() > 0.0 && darkerLimit < 100) {\r\n//     darkerLimit++;\r\n//     darker = darker.darken(0.04);\r\n//     colorRange.unshift(darker.hex());\r\n//   }\r\n//   let lighter = color(c);\r\n//   let lighterLimit = 0;\r\n//   while (lighter.luminosity() < 0.99 && lighterLimit < 100) {\r\n//     lighterLimit++;\r\n//     lighter = lighter.lighten(0.04);\r\n//     colorRange.push(lighter.hex());\r\n//   }\r\n\r\n//   console.log(\r\n//     \"lightness\",\r\n//     colorRange.map(c => color(c).luminosity())\r\n//   );\r\n\r\n//   const closest = standardRange.reduce((prev, curr) =>\r\n//     Math.abs(curr - luminosity * 100) < Math.abs(prev - luminosity * 100)\r\n//       ? curr\r\n//       : prev\r\n//   );\r\n//   const closestIndex = standardRange.indexOf(closest);\r\n//   const offset = luminosity * 100 - closest;\r\n//   const farthestDistance = Math.min(closestIndex, 9 - closestIndex);\r\n\r\n//   const range = values.map(x => Math.pow(x, ROOT));\r\n//   console.log(range);\r\n//   const colors = range.map((lightness, index) => {\r\n//     return colorRange.reduce((prev, curr) =>\r\n//       Math.abs(color(curr).lightness() - lightness) <\r\n//       Math.abs(color(prev).lightness() - lightness)\r\n//         ? curr\r\n//         : prev\r\n//     );\r\n//   });\r\n\r\n//   // return colors;\r\n\r\n//   return colorRange;\r\n// };\r\n\r\nconst generateColors = baseColor => {\r\n  const c = color(baseColor);\r\n\r\n  const luminosity = c.luminosity();\r\n  const ROOT = 1.5;\r\n  const luminositySqrt = Math.pow(luminosity, 1 / ROOT);\r\n  const luminositySqrtStr = luminositySqrt.toString();\r\n  const level = Number(luminositySqrtStr[2]);\r\n\r\n  const values = [1, 2, 3, 4, 5, 6, 7, 8, 9].map(x =>\r\n    Number(`0.${x}${luminositySqrtStr.slice(3)}`)\r\n  );\r\n\r\n  const colorRange = [c.hex()];\r\n  let darker = color(c);\r\n  let darkerLimit = 0;\r\n  while (darker.luminosity() > 0.01 && darkerLimit < 100) {\r\n    darkerLimit++;\r\n    darker = darker.darken(0.02);\r\n    colorRange.unshift(darker.hex());\r\n  }\r\n  let lighter = color(c);\r\n  let lighterLimit = 0;\r\n  while (lighter.luminosity() < 0.99 && lighterLimit < 100) {\r\n    lighterLimit++;\r\n    lighter = lighter.lighten(0.02);\r\n    colorRange.push(lighter.hex());\r\n  }\r\n\r\n  const range = values.map(x => Math.pow(x, ROOT));\r\n  const colors = range.map((luminosity, index) => {\r\n    return colorRange.reduce((prev, curr) =>\r\n      Math.abs(color(curr).luminosity() - luminosity) <\r\n        Math.abs(color(prev).luminosity() - luminosity)\r\n        ? curr\r\n        : prev\r\n    );\r\n  });\r\n\r\n  return { colors, level };\r\n};\r\n\r\nexport default NewColorGen;\r\n","import React from \"react\";\r\nimport \"normalize.css\";\r\nimport \"./transitions.css\";\r\n\r\nimport NewColorGen from \"../NewColorGen\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return <NewColorGen />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}